'\" t
.\" -*-nroff-*-
.\"
.\"     Copyright (C) 1996-2000 Michael R. Elkins <me@cs.hmc.edu>
.\"	Copyright (C) 1999-2000 Thomas Roessler <roessler@does-not-exist.org>
.\" 
.\"     This program is free software; you can redistribute it and/or modify
.\"     it under the terms of the GNU General Public License as published by
.\"     the Free Software Foundation; either version 2 of the License, or
.\"     (at your option) any later version.
.\" 
.\"     This program is distributed in the hope that it will be useful,
.\"     but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"     GNU General Public License for more details.
.\" 
.\"     You should have received a copy of the GNU General Public License
.\"     along with this program; if not, write to the Free Software
.\"     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
.\"
.TH muttrc 5 "September 2002" Unix "User Manuals"
.SH NAME
muttrc \- Configuration file for the Mutt Mail User Agent
.SH DESCRIPTION
.PP
A mutt configuration file consists of a series of \(lqcommands\(rq.
Each line of the file may contain one or more commands.  When
multiple commands are used, they must be separated by a semicolon
(\(lq\fB;\fP\(rq).
.PP
The hash mark, or pound sign (\(lq\fB#\fP\(rq), is used as a
\(lqcomment\(rq character. You can use it to annotate your
initialization file. All text after the comment character to the end
of the line is ignored.
.PP
Single quotes (\(lq\fB'\fP\(rq) and double quotes (\(lq\fB"\fP\(rq)
can be used to quote strings which contain spaces or other special
characters.  The difference between the two types of quotes is
similar to that of many popular shell programs, namely that a single
quote is used to specify a literal string (one that is not
interpreted for shell variables or quoting with a backslash [see
next paragraph]), while double quotes indicate a string which
should be evaluated.  For example, backticks are evaluated inside of
double quotes, but not single quotes.
.PP
\fB\(rs\fP quotes the next character, just as in shells such as bash and zsh.
For example, if want to put quotes (\(lq\fB"\fP\(rq) inside of a
string, you can use \(lq\fB\(rs\fP\(rq to force the next character
to be a literal instead of interpreted character.
.PP
\(lq\fB\(rs\(rs\fP\(rq means to insert a literal \(lq\fB\(rs\fP\(rq into the
line.  \(lq\fB\(rsn\fP\(rq and \(lq\fB\(rsr\fP\(rq have their usual
C meanings of linefeed and carriage-return, respectively.
.PP
A \(lq\fB\(rs\fP\(rq at the end of a line can be used to split commands over
multiple lines, provided that the split points don't appear in the
middle of command names.
.PP
It is also possible to substitute the output of a Unix command in an
initialization file.  This is accomplished by enclosing the command
in backticks (\fB`\fP\fIcommand\fP\fB`\fP).
.PP
UNIX environment variables can be accessed like the way it is done in shells
like sh and bash: Prepend the name of the variable by a dollar
(\(lq\fB\(Do\fP\(rq) sign.
.PP
.SH COMMANDS
.PP
.nf
\fBalias\fP [\fB-group\fP \fIname\fP [...]] \fIkey\fP \fIaddress\fP [\fB,\fP \fIaddress\fP [ ... ]]
\fBunalias\fP [\fB * \fP | \fIkey\fP ]
.fi
.IP
\fBalias\fP defines an alias \fIkey\fP for the given addresses. Each
\fIaddress\fP will be resolved into either an email address (user@example.com)
or a named email address (User Name <user@example.com>). The address may be specified in either format, or in the format \(lquser@example.com (User
Name)\(rq.
\fBunalias\fP removes the alias corresponding to the given \fIkey\fP or
all aliases when \(lq\fB*\fP\(rq is used as an argument. The optional
\fB-group\fP argument to \fBalias\fP causes the aliased address(es) to be
added to the named \fIgroup\fP.
.PP
.nf
\fBgroup\fP [\fB-group\fP \fIname\fP] [\fB-rx\fP \fIEXPR\fP [ \fI...\fP ]] [\fB-addr\fP \fIaddress\fP [ \fI...\fP ]]
\fBungroup\fP [\fB-group\fP \fIname\fP ] [ \fB*\fP | [[\fB-rx\fP \fIEXPR\fP [ \fI...\fP ]] [\fB-addr\fP \fIaddress\fP [ \fI...\fP ]]]
.fi
.IP
\fBgroup\fP is used to directly add either addresses or regular expressions to
the specified group or groups. The different categories of arguments to the
\fBgroup\fP command can be in any order. The flags \fI-rx\fP and \fI-addr\fP
specify what the following strings (that cannot begin with a hyphen) should be
interpreted as: either a regular expression or an email address, respectively.
\fBungroup\fP is used to remove addresses or regular expressions from the
specified group or groups. The syntax is similar to the \fBgroup\fP command,
however the special character \fB*\fP can be used to empty a group of all of
its contents.
.IP
These address groups can also be created implicitly by the \fBalias\fP, \fBlists\fP,
\fBsubscribe\fP and \fBalternates\fP commands by specifying the optional \fI-group\fP
option.
.IP
Once defined, these address groups can be used in patterns to search for and limit the
display to messages matching a group.
.PP
.nf
\fBalternates\fP [\fB-group\fP \fIname\fP] \fIregexp\fP [ \fIregexp\fP [ ... ]]
\fBunalternates\fP [\fB * \fP | \fIregexp\fP [ \fIregexp\fP [ ... ]] ]
.fi
.IP
\fBalternates\fP is used to inform mutt about alternate addresses
where you receive mail; you can use regular expressions to specify
alternate addresses.  This affects mutt's idea about messages
from you, and messages addressed to you.  \fBunalternates\fP removes
a regular expression from the list of known alternates. The \fB-group\fP flag
causes all of the subsequent regular expressions to be added to the named group.
.PP
.nf
\fBalternative_order\fP \fItype\fP[\fB/\fP\fIsubtype\fP] [ ... ]
\fBunalternative_order\fP [\fB * \fP | \fItype\fP/\fIsubtype\fP] [...]
.fi
.IP
\fBalternative_order\fP command permits you to define an order of preference which is
used by mutt to determine which part of a
\fBmultipart/alternative\fP body to display.
A subtype of \(lq\fB*\fP\(rq matches any subtype, as does an empty
subtype.   \fBunalternative_order\fP removes entries from the
ordered list or deletes the entire list when \(lq\fB*\fP\(rq is used
as an argument.
.PP
.nf
\fBauto_view\fP \fItype\fP[\fB/\fP\fIsubtype\fP] [ ... ]
\fBunauto_view\fP \fItype\fP[\fB/\fP\fIsubtype\fP] [ ... ]
.fi
.IP
This commands permits you to specify that mutt should automatically
convert the given MIME types to text/plain when displaying messages.
For this to work, there must be a 
.BR mailcap (5)
entry for the given MIME type with the 
.B copiousoutput
flag set.  A subtype of \(lq\fB*\fP\(rq 
matches any subtype, as does an empty subtype.
.PP
.nf
\fBmime_lookup\fP \fItype\fP[\fB/\fP\fIsubtype\fP] [ ... ]
\fBunmime_lookup\fP \fItype\fP[\fB/\fP\fIsubtype\fP] [ ... ]
.fi
.IP
This command permits you to define a list of "data" MIME content
types for which mutt will try to determine the actual file type from
the file name, and not use a 
.BR mailcap (5)
entry given for the original MIME type.  For instance, you may add
the \fBapplication/octet-stream\fP MIME type to this list.
.TP
\fBbind\fP \fImap1,map2,...\fP \fIkey\fP \fIfunction\fP
This command binds the given \fIkey\fP for the given \fImap\fP or maps
to the given \fIfunction\fP. Multiple maps may be specified by
separating them with commas (no whitespace is allowed).
.IP
Valid maps are:
.BR generic ", " alias ", " attach ", " 
.BR browser ", " editor ", "
.BR index ", " compose ", " 
.BR pager ", " pgp ", " postpone ", "
.BR mix .
.IP
For more information on keys and functions, please consult the Mutt
Manual. Note that the function name is to be specified without
angle brackets.
.TP
\fBaccount-hook\fP [\fB!\fP]\fIregexp\fP \fIcommand\fP
This hook is executed whenever you access a remote mailbox. Useful
to adjust configuration settings to different IMAP or POP servers.
.TP
\fBcharset-hook\fP \fIalias\fP \fIcharset\fP
This command defines an alias for a character set.  This is useful
to properly display messages which are tagged with a character set
name not known to mutt.
.TP
\fBiconv-hook\fP \fIcharset\fP \fIlocal-charset\fP
This command defines a system-specific name for a character set.
This is useful when your system's 
.BR iconv (3)
implementation does not understand MIME character set names (such as 
.BR iso-8859-1 ),
but instead insists on being fed with implementation-specific
character set names (such as
.BR 8859-1 ).
In this specific case, you'd put this into your configuration file:
.IP
.B "iconv-hook iso-8859-1 8859-1"
.TP
\fBmessage-hook\fP [\fB!\fP]\fIpattern\fP \fIcommand\fP
Before mutt displays (or formats for replying or forwarding) a
message which matches the given \fIpattern\fP (or, when it is
preceded by an exclamation mark, does not match the \fIpattern\fP),
the given \fIcommand\fP is executed.  When multiple
\fBmessage-hook\fPs match, they are  executed  in  the order in
which they occur in the configuration file.
.TP
\fBfolder-hook\fP [\fB!\fP]\fIregexp\fP \fIcommand\fP
When mutt enters a folder which matches \fIregexp\fP (or, when
\fIregexp\fP is preceded by an exclamation mark, does not match
\fIregexp\fP), the given \fIcommand\fP is executed.
.IP
When several \fBfolder-hook\fPs match a given mail folder, they are
executed in the order given in the configuration file.
.TP
\fBmacro\fP \fImap\fP \fIkey\fP \fIsequence\fP [ \fIdescription\fP ]
This command binds the given \fIsequence\fP of keys to the given
\fIkey\fP in the given \fImap\fP or maps.  For valid maps, see \fBbind\fP. To
specify multiple maps, put only a comma between the maps.
.PP
.nf
\fBcolor\fP \fIobject\fP \fIforeground\fP \fIbackground\fP [ \fI regexp\fP ]
\fBcolor\fP index \fIforeground\fP \fIbackground\fP [ \fI pattern\fP ]
\fBuncolor\fP index \fIpattern\fP [ \fIpattern\fP ... ]
.fi
.IP
If your terminal supports color, these commands can be used to
assign \fIforeground\fP/\fIbackground\fP combinations to certain
objects.  Valid objects are:
.BR attachment ", " body ", " bold ", " header ", "
.BR hdrdefault ", " index ", " indicator ", " markers ", "
.BR message ", " normal ", " quoted ", " quoted\fIN\fP ", "
.BR search ", " signature ", " status ", " tilde ", " tree ", "
.BR underline .
The
.BR body " and " header
objects allow you to restrict the colorization to a regular
expression.  The \fBindex\fP object permits you to select colored
messages by pattern.
.IP
Valid colors include:
.BR white ", " black ", " green ", " magenta ", " blue ", "
.BR cyan ", " yellow ", " red ", " default ", " color\fIN\fP .
.PP
.nf
\fBmono\fP \fIobject\fP \fIattribute\fP [ \fIregexp\fP ]
\fBmono\fP index \fIattribute\fP [ \fIpattern\fP ]
.fi
.IP
For terminals which don't support color, you can still assign
attributes to objects.  Valid attributes include:
.BR none ", " bold ", " underline ", " 
.BR reverse ", and " standout .
.TP
[\fBun\fP]\fBignore\fP \fIpattern\fP [ \fIpattern\fP ... ]
The \fBignore\fP command permits you to specify header fields which
you usually don't wish to see.  Any header field whose tag
\fIbegins\fP with an \(lqignored\(rq pattern will be ignored.
.IP
The \fBunignore\fP command permits you to define exceptions from
the above mentioned list of ignored headers.
.PP
.nf
\fBlists\fP [\fB-group\fP \fIname\fP] \fIregexp\fP [ \fIregexp\fP ... ]
\fBunlists\fP \fIregexp\fP [ \fIregexp\fP ... ]
\fBsubscribe\fP [\fB-group\fP \fIname\fP] \fIregexp\fP [ \fIregexp\fP ... ]
\fBunsubscribe\fP \fIregexp\fP [ \fIregexp\fP ... ]
.fi
.IP
Mutt maintains two lists of mailing list address patterns, a list of
subscribed mailing lists, and a list of known mailing lists.  All
subscribed mailing lists are known.  Patterns use regular expressions.
.IP
The \fBlists\fP command adds a mailing list address to the list of
known mailing lists.  The \fBunlists\fP command removes a mailing
list from the lists of known and subscribed mailing lists.  The
\fBsubscribe\fP command adds a mailing list to the lists of known
and subscribed mailing lists.  The \fBunsubscribe\fP command removes
it from the list of subscribed mailing lists. The \fb-group\fP flag
adds all of the subsequent regular expressions to the named group.
.TP
\fBmbox-hook\fP [\fB!\fP]\fIpattern\fP \fImailbox\fP
When mutt changes to a mail folder which matches \fIpattern\fP,
\fImailbox\fP will be used as the \(lqmbox\(rq folder, i.e., read
messages will be moved to that folder when the mail folder is left.
.IP
The first matching \fBmbox-hook\fP applies.
.PP
.nf
\fBmailboxes\fP \fIfilename\fP [ \fIfilename\fP ... ]
\fBunmailboxes\fP [ \fB*\fP | \fIfilename\fP ... ]
.fi
.IP
The \fBmailboxes\fP specifies folders which can receive mail and which will
be checked for new messages.  When changing folders, pressing space
will cycle through folders with new mail.  The \fBunmailboxes\fP
command is used to remove a file name from the list of folders which
can receive mail.  If "\fB*\fP" is specified as the file name, the
list is emptied.
.PP
.nf
\fBmy_hdr\fP \fIstring\fP
\fBunmy_hdr\fP \fIfield\fP
.fi
.IP
Using \fBmy_hdr\fP, you can define headers which will be added to
the messages you compose.  \fBunmy_hdr\fP will remove the given
user-defined headers.
.TP
\fBhdr_order\fP \fIheader1\fP \fIheader2\fP [ ... ]
With this command, you can specify an order in which mutt will
attempt to present headers to you when viewing messages.
.TP
\fBsave-hook\fP [\fB!\fP]\fIpattern\fP \fIfilename\fP
When a message matches \fIpattern\fP, the default file name when
saving it will be the given \fIfilename\fP.
.TP
\fBfcc-hook\fP [\fB!\fP]\fIpattern\fP \fIfilename\fP
When an outgoing message matches \fIpattern\fP, the default file
name for storing a copy (fcc) will be the given \fIfilename\fP.
.TP
\fBfcc-save-hook\fP [\fB!\fP]\fIpattern\fP \fIfilename\fP
This command is an abbreviation for identical \fBfcc-hook\fP and
\fBsave-hook\fP commands.
.TP
\fBsend-hook\fP [\fB!\fP]\fIpattern\fP \fIcommand\fP
When composing a message matching \fIpattern\fP, \fIcommand\fP is
executed.  When multiple \fBsend-hook\fPs match, they are executed
in the order in which they occur in the configuration file.
.TP
\fBsend2-hook\fP [\fB!\fP]\fIpattern\fP \fIcommand\fP
Whenever a message matching \fIpattern\fP is changed (either by
editing it or by using the compose menu), \fIcommand\fP
is executed. When multiple \fBsend2-hook\fPs match, they are
executed in the order in which they occur in the configuration file.
Possible applications include setting the $sendmail variable when a
message's from header is changed.
.IP
\fBsend2-hook\fP execution is not triggered by use of
\fBenter-command\fP from the compose menu.
.TP
\fBreply-hook\fP [\fB!\fP]\fIpattern\fP \fIcommand\fP
When replying to a message matching \fIpattern\fP, \fIcommand\fP is
executed.  When multiple \fBreply-hook\fPs match, they are executed
in the order in which they occur in the configuration file, but all
\fBreply-hook\fPs are matched and executed before \fBsend-hook\fPs,
regardless of their order in the configuration file.
.TP
\fBcrypt-hook\fP \fIpattern\fP \fIkey-id\fP
The crypt-hook command provides a method by which you can
specify the ID of the public key to be used when encrypting messages
to a certain recipient.  The meaning of "key ID" is to be taken
broadly: This can be a different e-mail address, a numerical key ID,
or even just an arbitrary search string.
.TP
\fBpush\fP \fIstring\fP
This command adds the named \fIstring\fP to the keyboard buffer.
.PP
.nf
\fBset\fP [\fBno\fP|\fBinv\fP|\fB&\fP|\fB?\fP]\fIvariable\fP[=\fIvalue\fP] [ ... ]
\fBtoggle\fP \fIvariable\fP [ ... ]
\fBunset\fP \fIvariable\fP [ ... ]
\fBreset\fP \fIvariable\fP [ ... ]
.fi
.IP
These commands are used to set and manipulate configuration
variables.
.IP
Mutt knows four basic types of variables: boolean, number, string
and quadoption.  Boolean variables can be \fBset\fP (true),
\fBunset\fP (false), or \fBtoggle\fPd. Number variables can be assigned
a positive integer value.
.IP
String variables consist of any number of printable characters.
Strings must be enclosed in quotes if they contain spaces or tabs.
You may also use the \(lqC\(rq escape sequences \fB\\n\fP and
\fB\\t\fP for newline and tab, respectively.
.IP
Quadoption variables are used to control whether or not to be
prompted for certain actions, or to specify a default action.  A
value of \fByes\fP will cause the action to be carried out automatically
as if you had answered yes to the question.  Similarly, a value of
\fBno\fP will cause the the action to be carried out as if you had
answered \(lqno.\(rq A value of \fBask-yes\fP will cause a prompt
with a default answer of \(lqyes\(rq and \fBask-no\fP will provide a
default answer of \(lqno.\(rq
.IP
The \fBreset\fP command resets all given variables to the compile
time defaults.  If you reset the special variable \fBall\fP, all
variables will reset to their compile time defaults.
.TP
\fBsource\fP \fIfilename\fP
The given file will be evaluated as a configuration file.
.TP
.nf
\fBspam\fP \fIpattern\fP \fIformat\fP
\fBnospam\fP \fIpattern\fP
.fi
These commands define spam-detection patterns from external spam
filters, so that mutt can sort, limit, and search on
``spam tags'' or ``spam attributes'', or display them
in the index. See the Mutt manual for details.
.TP
\fBunhook\fP [\fB * \fP | \fIhook-type\fP ]
This command will remove all hooks of a given type, or all hooks
when \(lq\fB*\fP\(rq is used as an argument.  \fIhook-type\fP
can be any of the \fB-hook\fP commands documented above.
.SH PATTERNS
.PP
In various places with mutt, including some of the above mentioned
\fBhook\fP commands, you can specify patterns to match messages.
.SS Constructing Patterns
.PP
A simple pattern consists of an operator of the form
\(lq\fB~\fP\fIcharacter\fP\(rq, possibly followed by a parameter
against which mutt is supposed to match the object specified by
this operator.  For some \fIcharacter\fPs, the \fB~\fP may be
replaced by another character to alter the behavior of the match.
These are described in the list of operators, below.
.PP
With some of these operators, the object to be matched consists of
several e-mail addresses.  In these cases, the object is matched if
at least one of these e-mail addresses matches. You can prepend a
hat (\(lq\fB^\fP\(rq) character to such a pattern to indicate that
\fIall\fP addresses must match in order to match the object.
.PP
You can construct complex patterns by combining simple patterns with
logical operators.  Logical AND is specified by simply concatenating
two simple patterns, for instance \(lq~C mutt-dev ~s bug\(rq.
Logical OR is specified by inserting a vertical bar (\(lq\fB|\fP\(rq)
between two patterns, for instance \(lq~C mutt-dev | ~s bug\(rq.
Additionally, you can negate a pattern by prepending a bang
(\(lq\fB!\fP\(rq) character.  For logical grouping, use braces
(\(lq()\(rq). Example: \(lq!(~t mutt|~c mutt) ~f elkins\(rq.
.SS Simple Patterns
.PP
Mutt understands the following simple patterns:
.P
.PD 0
.TP 12
~A
all messages
.TP
~b \fIEXPR\fP
messages which contain \fIEXPR\fP in the message body.
.TP
=b \fISTRING\fP
messages which contain \fISTRING\fP in the message body. If IMAP is enabled, searches for \fISTRING\fP on the server, rather than downloading each message and searching it locally.
.TP
~B \fIEXPR\fP
messages which contain \fIEXPR\fP in the whole message.
.TP
~c \fIEXPR\fP
messages carbon-copied to \fIEXPR\fP
.TP
%c \fIGROUP\fP
messages carbon-copied to any member of \fIGROUP\fP
.TP
~C \fIEXPR\fP
messages either to: or cc: \fIEXPR\fP
.TP
%C \fIGROUP\fP
messages either to: or cc: to any member of \fIGROUP\fP
.TP
~d \fIMIN\fP-\fIMAX\fP
messages with \(lqdate-sent\(rq in a Date range
.TP
~D
deleted messages
.TP
~e \fIEXPR\fP
messages which contain \fIEXPR\fP in the \(lqSender\(rq field
.TP
%e \fIGROUP\fP
messages which contain a member of \fIGROUP\fP in the \(lqSender\(rq field
.TP
~E
expired messages
.TP
~f \fIEXPR\fP
messages originating from \fIEXPR\fP
.TP
%f \fIGROUP\fP
messages originating from any member of \fIGROUP\fP
.TP
~F
flagged messages
.TP
~g
PGP signed messages
.TP
~G
PGP encrypted messages
.TP
~h \fIEXPR\fP
messages which contain \fIEXPR\fP in the message header
.TP
~H \fIEXPR\fP
messages with spam tags matching \fIEXPR\fP
.TP
~i \fIEXPR\fP
messages which match \fIEXPR\fP in the \(lqMessage-ID\(rq field
.TP
~k
messages containing PGP key material
.TP
~l
messages addressed to a known mailing list (defined by either \fBsubscribe\fP or \fBlist\fP)
.TP
~L \fIEXPR\fP
messages either originated or received by \fIEXPR\fP
.TP
%L \fIGROUP\fP
messages either originated or received by any member of \fIGROUP\fP
.TP
~m \fIMIN\fP-\fIMAX\fP
message in the range \fIMIN\fP to \fIMAX\fP
.TP
~n \fIMIN\fP-\fIMAX\fP
messages with a score in the range \fIMIN\fP to \fIMAX\fP
.TP
~N
new messages
.TP
~O
old messages
.TP
~p
messages addressed to you (as defined by \fBalternates\fP)
.TP
~P
messages from you (as defined by \fBalternates\fP)
.TP
~Q
messages which have been replied to
.TP
~r \fIMIN\fP-\fIMAX\fP
messages with \(lqdate-received\(rq in a Date range
.TP
~R
read messages
.TP
~s \fIEXPR\fP
messages having \fIEXPR\fP in the \(lqSubject\(rq field.
.TP
~S
superseded messages
.TP
~t \fIEXPR\fP
messages addressed to \fIEXPR\fP
.TP
~T
tagged messages
.TP
~u
messages addressed to a subscribed mailing list (defined by \fBsubscribe\fP commands)
.TP
~U
unread messages
.TP
~v
message is part of a collapsed thread.
.TP
~V
cryptographically verified messages
.TP
~x \fIEXPR\fP
messages which contain \fIEXPR\fP in the \(lqReferences\(rq or \(lqIn-Reply-To\(rq field
.TP
~X \fIMIN\fP-\fIMAX\fP
messages with MIN - MAX attachments
.TP
~y \fIEXPR\fP
messages which contain \fIEXPR\fP in the \(lqX-Label\(rq field
.TP
~z \fIMIN\fP-\fIMAX\fP
messages with a size in the range \fIMIN\fP to \fIMAX\fP
.TP
~=
duplicated messages (see $duplicate_threads)
.TP
~$
unreferenced message (requires threaded view)
.TP
~(PATTERN)
messages in threads containing messages matching a certain pattern, e.g. all threads containing messages from you: ~(~P)
.PD 1
.DT
.PP
In the above, \fIEXPR\fP is a regular expression.
.PP
With the \fB~d\fP, \fB~m\fP, \fB~n\fP, \fB~r\fP, \fB~X\fP, and \fB~z\fP operators, you can also
specify ranges in the forms \fB<\fP\fIMAX\fP, \fB>\fP\fIMIN\fP,
\fIMIN\fP\fB-\fP, and \fB-\fP\fIMAX\fP.
.PP
With the \fB~z\fP operator, the suffixes \(lqK\(rq and \(lqM\(rq are allowed to specify
kilobyte and megabyte respectively.
.SS Matching dates
.PP
The \fB~d\fP and \fB~r\fP operators are used to match date ranges,
which are interpreted to be given in your local time zone.
.PP
A date is of the form
\fIDD\fP[\fB/\fP\fIMM\fP[\fB/\fP[\fIcc\fP]\fIYY\fP]], that is, a
two-digit date, optionally followed by a two-digit month, optionally
followed by a year specifications.  Omitted fields default to the
current month and year.
.PP
Mutt understands either two or four digit year specifications.  When
given a two-digit year, mutt will interpret values less than 70 as
lying in the 21st century (i.e., \(lq38\(rq means 2038 and not 1938,
and \(lq00\(rq is interpreted as 2000), and values
greater than or equal to 70 as lying in the 20th century.
.PP
Note that this behavior \fIis\fP Y2K compliant, but that mutt
\fIdoes\fP have a Y2.07K problem.
.PP
If a date range consists of a single date, the operator in question
will match that precise date.  If the date range consists of a dash
(\(lq\fB-\fP\(rq), followed by a date, this range will match any
date before and up to the date given.  Similarly, a date followed by
a dash matches the date given and any later point of time.  Two
dates, separated by a dash, match any date which lies in the given
range of time.
.PP
You can also modify any absolute date by giving an error range.  An
error range consists of one of the characters
.BR + ,
.BR - ,
.BR * ,
followed by a positive number, followed by one of the unit
characters
.BR y ,
.BR m ,
.BR w ", or"
.BR d ,
specifying a unit of years, months, weeks, or days.  
.B +
increases the maximum date matched by the given interval of time,
.B - 
decreases the minimum date matched by the given interval of time, and
.B *
increases the maximum date and decreases the minimum date matched by
the given interval of time.  It is possible to give multiple error
margins, which cumulate.  Example:
.B "1/1/2001-1w+2w*3d"
.PP
You can also specify offsets relative to the current date.  An
offset is specified as one of the characters
.BR < ,
.BR > ,
.BR = ,
followed by a positive number, followed by one of the unit
characters
.BR y ,
.BR m ,
.BR w ", or"
.BR d .
.B >
matches dates which are older than the specified amount of time, an
offset which begins with the character
.B < 
matches dates which are more recent than the specified amount of time,
and an offset which begins with the character
.B =
matches points of time which are precisely the given amount of time
ago.
.SH CONFIGURATION VARIABLES

.TP
.B abort_nosubject
.nf
Type: quadoption
Default: ask\-yes
.fi
.IP
If set to \fIyes\fP, when composing messages and no subject is given
at the subject prompt, composition will be aborted.  If set to
\fIno\fP, composing messages with no subject given at the subject
prompt will never be aborted.


.TP
.B abort_unmodified
.nf
Type: quadoption
Default: yes
.fi
.IP
If set to \fIyes\fP, composition will automatically abort after
editing the message body if no changes are made to the file (this
check only happens after the \fIfirst\fP edit of the file).  When set
to \fIno\fP, composition will never be aborted.


.TP
.B alias_file
.nf
Type: path
Default: \(lq~/.muttrc\(rq
.fi
.IP
The default file in which to save aliases created by the
\fC<create-alias>\fP function. Entries added to this file are
encoded in the character set specified by $config_charset if it
is \fIset\fP or the current character set otherwise.
.IP
\fBNote:\fP Mutt will not automatically source this file; you must
explicitly use the \(lqsource\(rq command for it to be executed in case
this option points to a dedicated alias file.
.IP
The default for this option is the currently used muttrc file, or
\(lq~/.muttrc\(rq if no user muttrc was found.


.TP
.B alias_format
.nf
Type: string
Default: \(lq%4n %2f %t %\-10a   %r\(rq
.fi
.IP
Specifies the format of the data displayed for the \(lqalias\(rq menu.  The
following \fCprintf(3)\fP\-style sequences are available:
.RS
.PD 0
.TP
%a 
alias name
.TP
%f 
flags \- currently, a \(lqd\(rq for an alias marked for deletion
.TP
%n 
index number
.TP
%r 
address which alias expands to
.TP
%t 
character which indicates if the alias is tagged for inclusion
.RE
.PD 1

.TP
.B allow_8bit
.nf
Type: boolean
Default: yes
.fi
.IP
Controls whether 8\-bit data is converted to 7\-bit using either Quoted\-
Printable or Base64 encoding when sending mail.


.TP
.B allow_ansi
.nf
Type: boolean
Default: no
.fi
.IP
Controls whether ANSI color codes in messages (and color tags in
rich text messages) are to be interpreted.
Messages containing these codes are rare, but if this option is \fIset\fP,
their text will be colored accordingly. Note that this may override
your color choices, and even present a security problem, since a
message could include a line like

.IP
.DS
.sp
.ft CR
.nf
[\-\- PGP output follows ...

.fi
.ec
.ft P
.sp
.IP
and give it the same color as your attachment color (see also
$crypt_timestamp).


.TP
.B arrow_cursor
.nf
Type: boolean
Default: no
.fi
.IP
When \fIset\fP, an arrow (\(lq\->\(rq) will be used to indicate the current entry
in menus instead of highlighting the whole line.  On slow network or modem
links this will make response faster because there is less that has to
be redrawn on the screen when moving to the next or previous entries
in the menu.


.TP
.B ascii_chars
.nf
Type: boolean
Default: no
.fi
.IP
If \fIset\fP, Mutt will use plain ASCII characters when displaying thread
and attachment trees, instead of the default \fIACS\fP characters.


.TP
.B askbcc
.nf
Type: boolean
Default: no
.fi
.IP
If \fIset\fP, Mutt will prompt you for blind\-carbon\-copy (Bcc) recipients
before editing an outgoing message.


.TP
.B askcc
.nf
Type: boolean
Default: no
.fi
.IP
If \fIset\fP, Mutt will prompt you for carbon\-copy (Cc) recipients before
editing the body of an outgoing message.


.TP
.B assumed_charset
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This variable is a colon\-separated list of character encoding
schemes for messages without character encoding indication.
Header field values and message body content without character encoding
indication would be assumed that they are written in one of this list.
By default, all the header fields and message body without any charset
indication are assumed to be in \(lqus\-ascii\(rq.
.IP
For example, Japanese users might prefer this:

.IP
.DS
.sp
.ft CR
.nf
set assumed_charset=\(rqiso\-2022\-jp:euc\-jp:shift_jis:utf\-8\(rq

.fi
.ec
.ft P
.sp
.IP
However, only the first content is valid for the message body.


.TP
.B attach_charset
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This variable is a colon\-separated list of character encoding
schemes for text file attachments. Mutt uses this setting to guess
which encoding files being attached are encoded in to convert them to
a proper character set given in $send_charset.
.IP
If \fIunset\fP, the value of $charset will be used instead.
For example, the following configuration would work for Japanese
text handling:

.IP
.DS
.sp
.ft CR
.nf
set attach_charset=\(rqiso\-2022\-jp:euc\-jp:shift_jis:utf\-8\(rq

.fi
.ec
.ft P
.sp
.IP
Note: for Japanese users, \(lqiso\-2022\-*\(rq must be put at the head
of the value as shown above if included.


.TP
.B attach_format
.nf
Type: string
Default: \(lq%u%D%I %t%4n %T%.40d%> [%.7m/%.10M, %.6e%?C?, %C?, %s] \(rq
.fi
.IP
This variable describes the format of the \(lqattachment\(rq menu.  The
following \fCprintf(3)\fP\-style sequences are understood:
.RS
.PD 0
.TP
%C  
charset
.TP
%c  
requires charset conversion (\(lqn\(rq or \(lqc\(rq)
.TP
%D  
deleted flag
.TP
%d  
description
.TP
%e  
MIME content\-transfer\-encoding
.TP
%f  
filename
.TP
%I  
disposition (\(lqI\(rq for inline, \(lqA\(rq for attachment)
.TP
%m  
major MIME type
.TP
%M  
MIME subtype
.TP
%n  
attachment number
.TP
%Q  
\(lqQ\(rq, if MIME part qualifies for attachment counting
.TP
%s  
size
.TP
%t  
tagged flag
.TP
%T  
graphic tree characters
.TP
%u  
unlink (=to delete) flag
.TP
%X  
number of qualifying MIME parts in this part and its children
(please see the \(lqattachments\(rq section for possible speed effects)
.TP
%>X 
right justify the rest of the string and pad with character \(lqX\(rq
.TP
%|X 
pad to the end of the line with character \(lqX\(rq
.TP
%*X 
soft\-fill with character \(lqX\(rq as pad
.RE
.PD 1
.IP
For an explanation of \(lqsoft\-fill\(rq, see the $index_format documentation.


.TP
.B attach_sep
.nf
Type: string
Default: \(lq\\n\(rq
.fi
.IP
The separator to add between attachments when operating (saving,
printing, piping, etc) on a list of tagged attachments.


.TP
.B attach_split
.nf
Type: boolean
Default: yes
.fi
.IP
If this variable is \fIunset\fP, when operating (saving, printing, piping,
etc) on a list of tagged attachments, Mutt will concatenate the
attachments and will operate on them as a single attachment. The
$attach_sep separator is added after each attachment. When \fIset\fP,
Mutt will operate on the attachments one by one.


.TP
.B attribution
.nf
Type: string
Default: \(lqOn %d, %n wrote:\(rq
.fi
.IP
This is the string that will precede a message which has been included
in a reply.  For a full listing of defined \fCprintf(3)\fP\-like sequences see
the section on $index_format.


.TP
.B auto_tag
.nf
Type: boolean
Default: no
.fi
.IP
When \fIset\fP, functions in the \fIindex\fP menu which affect a message
will be applied to all tagged messages (if there are any).  When
unset, you must first use the \fC<tag\-prefix>\fP function (bound to \(lq;\(rq
by default) to make the next function apply to all tagged messages.


.TP
.B autoedit
.nf
Type: boolean
Default: no
.fi
.IP
When \fIset\fP along with $edit_headers, Mutt will skip the initial
send\-menu (prompting for subject and recipients) and allow you to
immediately begin editing the body of your
message.  The send\-menu may still be accessed once you have finished
editing the body of your message.
.IP
\fBNote:\fP when this option is \fIset\fP, you cannot use send\-hooks that depend
on the recipients when composing a new (non\-reply) message, as the initial
list of recipients is empty.
.IP
Also see $fast_reply.


.TP
.B beep
.nf
Type: boolean
Default: yes
.fi
.IP
When this variable is \fIset\fP, mutt will beep when an error occurs.


.TP
.B beep_new
.nf
Type: boolean
Default: no
.fi
.IP
When this variable is \fIset\fP, mutt will beep whenever it prints a message
notifying you of new mail.  This is independent of the setting of the
$beep variable.


.TP
.B bounce
.nf
Type: quadoption
Default: ask\-yes
.fi
.IP
Controls whether you will be asked to confirm bouncing messages.
If set to \fIyes\fP you don't get asked if you want to bounce a
message. Setting this variable to \fIno\fP is not generally useful,
and thus not recommended, because you are unable to bounce messages.


.TP
.B bounce_delivered
.nf
Type: boolean
Default: yes
.fi
.IP
When this variable is \fIset\fP, mutt will include Delivered\-To headers when
bouncing messages.  Postfix users may wish to \fIunset\fP this variable.


.TP
.B braille_friendly
.nf
Type: boolean
Default: no
.fi
.IP
When this variable is \fIset\fP, mutt will place the cursor at the beginning
of the current line in menus, even when the $arrow_cursor variable
is \fIunset\fP, making it easier for blind persons using Braille displays to
follow these menus.  The option is \fIunset\fP by default because many
visual terminals don't permit making the cursor invisible.


.TP
.B certificate_file
.nf
Type: path
Default: \(lq~/.mutt_certificates\(rq
.fi
.IP
This variable specifies the file where the certificates you trust
are saved. When an unknown certificate is encountered, you are asked
if you accept it or not. If you accept it, the certificate can also
be saved in this file and further connections are automatically
accepted.
.IP
You can also manually add CA certificates in this file. Any server
certificate that is signed with one of these CA certificates is
also automatically accepted.
.IP
Example:

.IP
.DS
.sp
.ft CR
.nf
set certificate_file=~/.mutt/certificates

.fi
.ec
.ft P
.sp


.TP
.B charset
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
Character set your terminal uses to display and enter textual data.
It is also the fallback for $send_charset.
.IP
Upon startup Mutt tries to derive this value from environment variables
such as \fC$LC_CTYPE\fP or \fC$LANG\fP.
.IP
\fBNote:\fP It should only be set in case Mutt isn't able to determine the
character set used correctly.


.TP
.B check_mbox_size
.nf
Type: boolean
Default: no
.fi
.IP
When this variable is \fIset\fP, mutt will use file size attribute instead of
access time when checking for new mail in mbox and mmdf folders.
.IP
This variable is \fIunset\fP by default and should only be enabled when
new mail detection for these folder types is unreliable or doesn't work.
.IP
Note that enabling this variable should happen before any \(lqmailboxes\(rq
directives occur in configuration files regarding mbox or mmdf folders
because mutt needs to determine the initial new mail status of such a
mailbox by performing a fast mailbox scan when it is defined.
Afterwards the new mail status is tracked by file size changes.


.TP
.B check_new
.nf
Type: boolean
Default: yes
.fi
.IP
\fBNote:\fP this option only affects \fImaildir\fP and \fIMH\fP style
mailboxes.
.IP
When \fIset\fP, Mutt will check for new mail delivered while the
mailbox is open.  Especially with MH mailboxes, this operation can
take quite some time since it involves scanning the directory and
checking each file to see if it has already been looked at.  If
this variable is \fIunset\fP, no check for new mail is performed
while the mailbox is open.


.TP
.B collapse_unread
.nf
Type: boolean
Default: yes
.fi
.IP
When \fIunset\fP, Mutt will not collapse a thread if it contains any
unread messages.


.TP
.B compose_format
.nf
Type: string
Default: \(lq\-\- Mutt: Compose  [Approx. msg size: %l   Atts: %a]%>\-\(rq
.fi
.IP
Controls the format of the status line displayed in the \(lqcompose\(rq
menu.  This string is similar to $status_format, but has its own
set of \fCprintf(3)\fP\-like sequences:
.RS
.PD 0
.TP
%a 
total number of attachments
.TP
%h 
local hostname
.TP
%l 
approximate size (in bytes) of the current message
.TP
%v 
Mutt version string
.RE
.PD 1
.IP
See the text describing the $status_format option for more
information on how to set $compose_format.


.TP
.B config_charset
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
When defined, Mutt will recode commands in rc files from this
encoding to the current character set as specified by $charset
and aliases written to $alias_file from the current character set.
.IP
Please note that if setting $charset it must be done before
setting $config_charset.
.IP
Recoding should be avoided as it may render unconvertable
characters as question marks which can lead to undesired
side effects (for example in regular expressions).


.TP
.B confirmappend
.nf
Type: boolean
Default: yes
.fi
.IP
When \fIset\fP, Mutt will prompt for confirmation when appending messages to
an existing mailbox.


.TP
.B confirmcreate
.nf
Type: boolean
Default: yes
.fi
.IP
When \fIset\fP, Mutt will prompt for confirmation when saving messages to a
mailbox which does not yet exist before creating it.


.TP
.B connect_timeout
.nf
Type: number
Default: 30
.fi
.IP
Causes Mutt to timeout a network connection (for IMAP, POP or SMTP) after this
many seconds if the connection is not able to be established.  A negative
value causes Mutt to wait indefinitely for the connection attempt to succeed.


.TP
.B content_type
.nf
Type: string
Default: \(lqtext/plain\(rq
.fi
.IP
Sets the default Content\-Type for the body of newly composed messages.


.TP
.B copy
.nf
Type: quadoption
Default: yes
.fi
.IP
This variable controls whether or not copies of your outgoing messages
will be saved for later references.  Also see $record,
$save_name, $force_name and \(lqfcc-hook\(rq.


.TP
.B crypt_autoencrypt
.nf
Type: boolean
Default: no
.fi
.IP
Setting this variable will cause Mutt to always attempt to PGP
encrypt outgoing messages.  This is probably only useful in
connection to the \(lqsend-hook\(rq command.  It can be overridden
by use of the pgp menu, when encryption is not required or
signing is requested as well.  If $smime_is_default is \fIset\fP,
then OpenSSL is used instead to create S/MIME messages and
settings can be overridden by use of the smime menu instead.
(Crypto only)


.TP
.B crypt_autopgp
.nf
Type: boolean
Default: yes
.fi
.IP
This variable controls whether or not mutt may automatically enable
PGP encryption/signing for messages.  See also $crypt_autoencrypt,
$crypt_replyencrypt,
$crypt_autosign, $crypt_replysign and $smime_is_default.


.TP
.B crypt_autosign
.nf
Type: boolean
Default: no
.fi
.IP
Setting this variable will cause Mutt to always attempt to
cryptographically sign outgoing messages.  This can be overridden
by use of the pgp menu, when signing is not required or
encryption is requested as well. If $smime_is_default is \fIset\fP,
then OpenSSL is used instead to create S/MIME messages and settings can
be overridden by use of the smime menu instead of the pgp menu.
(Crypto only)


.TP
.B crypt_autosmime
.nf
Type: boolean
Default: yes
.fi
.IP
This variable controls whether or not mutt may automatically enable
S/MIME encryption/signing for messages. See also $crypt_autoencrypt,
$crypt_replyencrypt,
$crypt_autosign, $crypt_replysign and $smime_is_default.


.TP
.B crypt_replyencrypt
.nf
Type: boolean
Default: yes
.fi
.IP
If \fIset\fP, automatically PGP or OpenSSL encrypt replies to messages which are
encrypted.
(Crypto only)


.TP
.B crypt_replysign
.nf
Type: boolean
Default: no
.fi
.IP
If \fIset\fP, automatically PGP or OpenSSL sign replies to messages which are
signed.
.IP
\fBNote:\fP this does not work on messages that are encrypted
\fIand\fP signed!
(Crypto only)


.TP
.B crypt_replysignencrypted
.nf
Type: boolean
Default: no
.fi
.IP
If \fIset\fP, automatically PGP or OpenSSL sign replies to messages
which are encrypted. This makes sense in combination with
$crypt_replyencrypt, because it allows you to sign all
messages which are automatically encrypted.  This works around
the problem noted in $crypt_replysign, that mutt is not able
to find out whether an encrypted message is also signed.
(Crypto only)


.TP
.B crypt_timestamp
.nf
Type: boolean
Default: yes
.fi
.IP
If \fIset\fP, mutt will include a time stamp in the lines surrounding
PGP or S/MIME output, so spoofing such lines is more difficult.
If you are using colors to mark these lines, and rely on these,
you may \fIunset\fP this setting.
(Crypto only)


.TP
.B crypt_use_gpgme
.nf
Type: boolean
Default: no
.fi
.IP
This variable controls the use of the GPGME\-enabled crypto backends.
If it is \fIset\fP and Mutt was built with gpgme support, the gpgme code for
S/MIME and PGP will be used instead of the classic code.  Note that
you need to set this option in .muttrc; it won't have any effect when
used interactively.


.TP
.B crypt_use_pka
.nf
Type: boolean
Default: no
.fi
.IP
Controls whether mutt uses PKA
(see http://www.g10code.de/docs/pka\-intro.de.pdf) during signature
verification (only supported by the GPGME backend).


.TP
.B crypt_verify_sig
.nf
Type: quadoption
Default: yes
.fi
.IP
If \fI\(lqyes\(rq\fP, always attempt to verify PGP or S/MIME signatures.
If \fI\(lqask\-*\(rq\fP, ask whether or not to verify the signature.
If \fI\(lqno\(rq\fP, never attempt to verify cryptographic signatures.
(Crypto only)


.TP
.B date_format
.nf
Type: string
Default: \(lq!%a, %b %d, %Y at %I:%M:%S%p %Z\(rq
.fi
.IP
This variable controls the format of the date printed by the \(lq%d\(rq
sequence in $index_format.  This is passed to the \fCstrftime(3)\fP
function to process the date, see the man page for the proper syntax.
.IP
Unless the first character in the string is a bang (\(lq!\(rq), the month
and week day names are expanded according to the locale specified in
the variable $locale. If the first character in the string is a
bang, the bang is discarded, and the month and week day names in the
rest of the string are expanded in the \fIC\fP locale (that is in US
English).


.TP
.B default_hook
.nf
Type: string
Default: \(lq~f %s !~P | (~P ~C %s)\(rq
.fi
.IP
This variable controls how \(lqmessage-hook\(rq, \(lqreply-hook\(rq, \(lqsend-hook\(rq,
\(lqsend2-hook\(rq, \(lqsave-hook\(rq, and \(lqfcc-hook\(rq will
be interpreted if they are specified with only a simple regexp,
instead of a matching pattern.  The hooks are expanded when they are
declared, so a hook will be interpreted according to the value of this
variable at the time the hook is declared.
.IP
The default value matches
if the message is either from a user matching the regular expression
given, or if it is from you (if the from address matches
\(lqalternates\(rq) and is to or cc'ed to a user matching the given
regular expression.


.TP
.B delete
.nf
Type: quadoption
Default: ask\-yes
.fi
.IP
Controls whether or not messages are really deleted when closing or
synchronizing a mailbox.  If set to \fIyes\fP, messages marked for
deleting will automatically be purged without prompting.  If set to
\fIno\fP, messages marked for deletion will be kept in the mailbox.


.TP
.B delete_untag
.nf
Type: boolean
Default: yes
.fi
.IP
If this option is \fIset\fP, mutt will untag messages when marking them
for deletion.  This applies when you either explicitly delete a message,
or when you save it to another folder.


.TP
.B digest_collapse
.nf
Type: boolean
Default: yes
.fi
.IP
If this option is \fIset\fP, mutt's received\-attachments menu will not show the subparts of
individual messages in a multipart/digest.  To see these subparts, press \(lqv\(rq on that menu.


.TP
.B display_filter
.nf
Type: path
Default: \(lq\(rq
.fi
.IP
When set, specifies a command used to filter messages.  When a message
is viewed it is passed as standard input to $display_filter, and the
filtered message is read from the standard output.


.TP
.B dotlock_program
.nf
Type: path
Default: \(lq/usr/bin/mutt_dotlock\(rq
.fi
.IP
Contains the path of the \fCmutt_dotlock(8)\fP binary to be used by
mutt.


.TP
.B dsn_notify
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This variable sets the request for when notification is returned.  The
string consists of a comma separated list (no spaces!) of one or more
of the following: \fInever\fP, to never request notification,
\fIfailure\fP, to request notification on transmission failure,
\fIdelay\fP, to be notified of message delays, \fIsuccess\fP, to be
notified of successful transmission.
.IP
Example:

.IP
.DS
.sp
.ft CR
.nf
set dsn_notify=\(rqfailure,delay\(rq

.fi
.ec
.ft P
.sp
.IP
\fBNote:\fP when using $sendmail for delivery, you should not enable
this unless you are either using Sendmail 8.8.x or greater or a MTA
providing a \fCsendmail(1)\fP\-compatible interface supporting the \fC\-N\fP option
for DSN. For SMTP delivery, DSN support is auto\-detected so that it
depends on the server whether DSN will be used or not.


.TP
.B dsn_return
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This variable controls how much of your message is returned in DSN
messages.  It may be set to either \fIhdrs\fP to return just the
message header, or \fIfull\fP to return the full message.
.IP
Example:

.IP
.DS
.sp
.ft CR
.nf
set dsn_return=hdrs

.fi
.ec
.ft P
.sp
.IP
\fBNote:\fP when using $sendmail for delivery, you should not enable
this unless you are either using Sendmail 8.8.x or greater or a MTA
providing a \fCsendmail(1)\fP\-compatible interface supporting the \fC\-R\fP option
for DSN. For SMTP delivery, DSN support is auto\-detected so that it
depends on the server whether DSN will be used or not.


.TP
.B duplicate_threads
.nf
Type: boolean
Default: yes
.fi
.IP
This variable controls whether mutt, when $sort is set to \fIthreads\fP, threads
messages with the same Message\-Id together.  If it is \fIset\fP, it will indicate
that it thinks they are duplicates of each other with an equals sign
in the thread tree.


.TP
.B edit_headers
.nf
Type: boolean
Default: no
.fi
.IP
This option allows you to edit the header of your outgoing messages
along with the body of your message.
.IP
\fBNote\fP that changes made to the References: and Date: headers are
ignored for interoperability reasons.


.TP
.B editor
.nf
Type: path
Default: \(lq\(rq
.fi
.IP
This variable specifies which editor is used by mutt.
It defaults to the value of the \fC$VISUAL\fP, or \fC$EDITOR\fP, environment
variable, or to the string \(lqvi\(rq if neither of those are set.


.TP
.B encode_from
.nf
Type: boolean
Default: no
.fi
.IP
When \fIset\fP, mutt will quoted\-printable encode messages when
they contain the string \(lqFrom \(rq (note the trailing space) in the beginning of a line.
This is useful to avoid the tampering certain mail delivery and transport
agents tend to do with messages (in order to prevent tools from
misinterpreting the line as a mbox message separator).


.TP
.B envelope_from_address
.nf
Type: e-mail address
Default: \(lq\(rq
.fi
.IP
Manually sets the \fIenvelope\fP sender for outgoing messages.
This value is ignored if $use_envelope_from is \fIunset\fP.


.TP
.B escape
.nf
Type: string
Default: \(lq~\(rq
.fi
.IP
Escape character to use for functions in the built\-in editor.


.TP
.B fast_reply
.nf
Type: boolean
Default: no
.fi
.IP
When \fIset\fP, the initial prompt for recipients and subject are skipped
when replying to messages, and the initial prompt for subject is
skipped when forwarding messages.
.IP
\fBNote:\fP this variable has no effect when the $autoedit
variable is \fIset\fP.


.TP
.B fcc_attach
.nf
Type: quadoption
Default: yes
.fi
.IP
This variable controls whether or not attachments on outgoing messages
are saved along with the main body of your message.


.TP
.B fcc_clear
.nf
Type: boolean
Default: no
.fi
.IP
When this variable is \fIset\fP, FCCs will be stored unencrypted and
unsigned, even when the actual message is encrypted and/or
signed.
(PGP only)


.TP
.B folder
.nf
Type: path
Default: \(lq~/Mail\(rq
.fi
.IP
Specifies the default location of your mailboxes.  A \(lq+\(rq or \(lq=\(rq at the
beginning of a pathname will be expanded to the value of this
variable.  Note that if you change this variable (from the default)
value you need to make sure that the assignment occurs \fIbefore\fP
you use \(lq+\(rq or \(lq=\(rq for any other variables since expansion takes place
when handling the \(lqmailboxes\(rq command.


.TP
.B folder_format
.nf
Type: string
Default: \(lq%2C %t %N %F %2l %\-8.8u %\-8.8g %8s %d %f\(rq
.fi
.IP
This variable allows you to customize the file browser display to your
personal taste.  This string is similar to $index_format, but has
its own set of \fCprintf(3)\fP\-like sequences:
.RS
.PD 0
.TP
%C  
current file number
.TP
%d  
date/time folder was last modified
.TP
%D  
date/time folder was last modified using $date_format.
.TP
%f  
filename (\(lq/\(rq is appended to directory names,
\(lq@\(rq to symbolic links and \(lq*\(rq to executable
files)
.TP
%F  
file permissions
.TP
%g  
group name (or numeric gid, if missing)
.TP
%l  
number of hard links
.TP
%N  
N if folder has new mail, blank otherwise
.TP
%s  
size in bytes
.TP
%t  
\(lq*\(rq if the file is tagged, blank otherwise
.TP
%u  
owner name (or numeric uid, if missing)
.TP
%>X 
right justify the rest of the string and pad with character \(lqX\(rq
.TP
%|X 
pad to the end of the line with character \(lqX\(rq
.TP
%*X 
soft\-fill with character \(lqX\(rq as pad
.RE
.PD 1
.IP
For an explanation of \(lqsoft\-fill\(rq, see the $index_format documentation.


.TP
.B followup_to
.nf
Type: boolean
Default: yes
.fi
.IP
Controls whether or not the \(lqMail\-Followup\-To:\(rq header field is
generated when sending mail.  When \fIset\fP, Mutt will generate this
field when you are replying to a known mailing list, specified with
the \(lqsubscribe\(rq or \(lqlists\(rq commands.
.IP
This field has two purposes.  First, preventing you from
receiving duplicate copies of replies to messages which you send
to mailing lists, and second, ensuring that you do get a reply
separately for any messages sent to known lists to which you are
not subscribed.
.IP
The header will contain only the list's address
for subscribed lists, and both the list address and your own
email address for unsubscribed lists.  Without this header, a
group reply to your message sent to a subscribed list will be
sent to both the list and your address, resulting in two copies
of the same email for you.


.TP
.B force_name
.nf
Type: boolean
Default: no
.fi
.IP
This variable is similar to $save_name, except that Mutt will
store a copy of your outgoing message by the username of the address
you are sending to even if that mailbox does not exist.
.IP
Also see the $record variable.


.TP
.B forward_decode
.nf
Type: boolean
Default: yes
.fi
.IP
Controls the decoding of complex MIME messages into \fCtext/plain\fP when
forwarding a message.  The message header is also RFC2047 decoded.
This variable is only used, if $mime_forward is \fIunset\fP,
otherwise $mime_forward_decode is used instead.


.TP
.B forward_decrypt
.nf
Type: boolean
Default: yes
.fi
.IP
Controls the handling of encrypted messages when forwarding a message.
When \fIset\fP, the outer layer of encryption is stripped off.  This
variable is only used if $mime_forward is \fIset\fP and
$mime_forward_decode is \fIunset\fP.
(PGP only)


.TP
.B forward_edit
.nf
Type: quadoption
Default: yes
.fi
.IP
This quadoption controls whether or not the user is automatically
placed in the editor when forwarding messages.  For those who always want
to forward with no modification, use a setting of \(lqno\(rq.


.TP
.B forward_format
.nf
Type: string
Default: \(lq[%a: %s]\(rq
.fi
.IP
This variable controls the default subject when forwarding a message.
It uses the same format sequences as the $index_format variable.


.TP
.B forward_quote
.nf
Type: boolean
Default: no
.fi
.IP
When \fIset\fP, forwarded messages included in the main body of the
message (when $mime_forward is \fIunset\fP) will be quoted using
$indent_string.


.TP
.B from
.nf
Type: e-mail address
Default: \(lq\(rq
.fi
.IP
When \fIset\fP, this variable contains a default from address.  It
can be overridden using \(lqmy_hdr\(rq (including from a \(lqsend-hook\(rq) and
$reverse_name.  This variable is ignored if $use_from is \fIunset\fP.
.IP
This setting defaults to the contents of the environment variable \fC$EMAIL\fP.


.TP
.B gecos_mask
.nf
Type: regular expression
Default: \(lq^[^,]*\(rq
.fi
.IP
A regular expression used by mutt to parse the GECOS field of a password
entry when expanding the alias.  The default value
will return the string up to the first \(lq,\(rq encountered.
If the GECOS field contains a string like \(lqlastname, firstname\(rq then you
should set it to \(lq\fC.*\fP\(rq.
.IP
This can be useful if you see the following behavior: you address an e\-mail
to user ID \(lqstevef\(rq whose full name is \(lqSteve Franklin\(rq.  If mutt expands
\(lqstevef\(rq to \(lq\(rqFranklin\(rq stevef@foo.bar\(rq then you should set the $gecos_mask to
a regular expression that will match the whole name so mutt will expand
\(lqFranklin\(rq to \(lqFranklin, Steve\(rq.


.TP
.B hdrs
.nf
Type: boolean
Default: yes
.fi
.IP
When \fIunset\fP, the header fields normally added by the \(lqmy_hdr\(rq
command are not created.  This variable \fImust\fP be unset before
composing a new message or replying in order to take effect.  If \fIset\fP,
the user defined header fields are added to every new message.


.TP
.B header
.nf
Type: boolean
Default: no
.fi
.IP
When \fIset\fP, this variable causes Mutt to include the header
of the message you are replying to into the edit buffer.
The $weed setting applies.


.TP
.B header_cache
.nf
Type: path
Default: \(lq\(rq
.fi
.IP
This variable points to the header cache database.
If pointing to a directory Mutt will contain a header cache
database file per folder, if pointing to a file that file will
be a single global header cache. By default it is \fIunset\fP so no header
caching will be used.
.IP
Header caching can greatly improve speed when opening POP, IMAP
MH or Maildir folders, see \(lqcaching\(rq for details.


.TP
.B header_cache_compress
.nf
Type: boolean
Default: yes
.fi
.IP
When mutt is compiled with qdbm or tokyocabinet as header cache backend,
this option determines whether the database will be compressed.
Compression results in database files roughly being one fifth
of the usual diskspace, but the decompression can result in a
slower opening of cached folder(s) which in general is still
much faster than opening non header cached folders.


.TP
.B help
.nf
Type: boolean
Default: yes
.fi
.IP
When \fIset\fP, help lines describing the bindings for the major functions
provided by each menu are displayed on the first line of the screen.
.IP
\fBNote:\fP The binding will not be displayed correctly if the
function is bound to a sequence rather than a single keystroke.  Also,
the help line may not be updated if a binding is changed while Mutt is
running.  Since this variable is primarily aimed at new users, neither
of these should present a major problem.


.TP
.B hidden_host
.nf
Type: boolean
Default: no
.fi
.IP
When \fIset\fP, mutt will skip the host name part of $hostname variable
when adding the domain part to addresses.  This variable does not
affect the generation of Message\-IDs, and it will not lead to the
cut\-off of first\-level domains.


.TP
.B hide_limited
.nf
Type: boolean
Default: no
.fi
.IP
When \fIset\fP, mutt will not show the presence of messages that are hidden
by limiting, in the thread tree.


.TP
.B hide_missing
.nf
Type: boolean
Default: yes
.fi
.IP
When \fIset\fP, mutt will not show the presence of missing messages in the
thread tree.


.TP
.B hide_thread_subject
.nf
Type: boolean
Default: yes
.fi
.IP
When \fIset\fP, mutt will not show the subject of messages in the thread
tree that have the same subject as their parent or closest previously
displayed sibling.


.TP
.B hide_top_limited
.nf
Type: boolean
Default: no
.fi
.IP
When \fIset\fP, mutt will not show the presence of messages that are hidden
by limiting, at the top of threads in the thread tree.  Note that when
$hide_limited is \fIset\fP, this option will have no effect.


.TP
.B hide_top_missing
.nf
Type: boolean
Default: yes
.fi
.IP
When \fIset\fP, mutt will not show the presence of missing messages at the
top of threads in the thread tree.  Note that when $hide_missing is
\fIset\fP, this option will have no effect.


.TP
.B history
.nf
Type: number
Default: 10
.fi
.IP
This variable controls the size (in number of strings remembered) of
the string history buffer per category. The buffer is cleared each time the
variable is set.


.TP
.B history_file
.nf
Type: path
Default: \(lq~/.mutthistory\(rq
.fi
.IP
The file in which Mutt will save its history.


.TP
.B honor_disposition
.nf
Type: boolean
Default: no
.fi
.IP
When \fIset\fP, Mutt will not display attachments with a
disposition of \(lqattachment\(rq inline even if it could
render the part to plain text. These MIME parts can only
be viewed from the attachment menu.
.IP
If \fIunset\fP, Mutt will render all MIME parts it can
properly transform to plain text.


.TP
.B honor_followup_to
.nf
Type: quadoption
Default: yes
.fi
.IP
This variable controls whether or not a Mail\-Followup\-To header is
honored when group\-replying to a message.


.TP
.B hostname
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
Specifies the fully\-qualified hostname of the system mutt is running on
containing the host's name and the DNS domain it belongs to. It is used
as the domain part (after \(lq@\(rq) for local email addresses as well as
Message\-Id headers.
.IP
Its value is determined at startup as follows: If the node's name
as returned by the \fCuname(3)\fP function contains the hostname and the
domain, these are used to construct $hostname. If there is no
domain part returned, Mutt will look for a \(lqdomain\(rq or \(lqsearch\(rq
line in \fC/etc/resolv.conf\fP to determine the domain. Optionally, Mutt
can be compiled with a fixed domain name in which case a detected
one is not used.
.IP
Also see $use_domain and $hidden_host.


.TP
.B ignore_linear_white_space
.nf
Type: boolean
Default: no
.fi
.IP
This option replaces linear\-white\-space between encoded\-word
and text to a single space to prevent the display of MIME\-encoded
\(lqSubject:\(rq field from being divided into multiple lines.


.TP
.B ignore_list_reply_to
.nf
Type: boolean
Default: no
.fi
.IP
Affects the behavior of the \fC<reply>\fP function when replying to
messages from mailing lists (as defined by the \(lqsubscribe\(rq or
\(lqlists\(rq commands).  When \fIset\fP, if the \(lqReply\-To:\(rq field is
set to the same value as the \(lqTo:\(rq field, Mutt assumes that the
\(lqReply\-To:\(rq field was set by the mailing list to automate responses
to the list, and will ignore this field.  To direct a response to the
mailing list when this option is \fIset\fP, use the \fC<list-reply>\fP
function; \fC<group\-reply>\fP will reply to both the sender and the
list.


.TP
.B imap_authenticators
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This is a colon\-delimited list of authentication methods mutt may
attempt to use to log in to an IMAP server, in the order mutt should
try them.  Authentication methods are either \(lqlogin\(rq or the right
side of an IMAP \(lqAUTH=xxx\(rq capability string, e.g. \(lqdigest\-md5\(rq, \(lqgssapi\(rq
or \(lqcram\-md5\(rq. This option is case\-insensitive. If it's
\fIunset\fP (the default) mutt will try all available methods,
in order from most\-secure to least\-secure.
.IP
Example:

.IP
.DS
.sp
.ft CR
.nf
set imap_authenticators=\(rqgssapi:cram\-md5:login\(rq

.fi
.ec
.ft P
.sp
.IP
\fBNote:\fP Mutt will only fall back to other authentication methods if
the previous methods are unavailable. If a method is available but
authentication fails, mutt will not connect to the IMAP server.


.TP
.B imap_check_subscribed
.nf
Type: boolean
Default: no
.fi
.IP
When \fIset\fP, mutt will fetch the set of subscribed folders from
your server on connection, and add them to the set of mailboxes
it polls for new mail just as if you had issued individual \(lqmailboxes\(rq
commands.


.TP
.B imap_delim_chars
.nf
Type: string
Default: \(lq/.\(rq
.fi
.IP
This contains the list of characters which you would like to treat
as folder separators for displaying IMAP paths. In particular it
helps in using the \(lq=\(rq shortcut for your \fIfolder\fP variable.


.TP
.B imap_headers
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
Mutt requests these header fields in addition to the default headers
(\(lqDate:\(rq, \(lqFrom:\(rq, \(lqSubject:\(rq, \(lqTo:\(rq, \(lqCc:\(rq, \(lqMessage\-Id:\(rq,
\(lqReferences:\(rq, \(lqContent\-Type:\(rq, \(lqContent\-Description:\(rq, \(lqIn\-Reply\-To:\(rq,
\(lqReply\-To:\(rq, \(lqLines:\(rq, \(lqList\-Post:\(rq, \(lqX\-Label:\(rq) from IMAP
servers before displaying the index menu. You may want to add more
headers for spam detection.
.IP
\fBNote:\fP This is a space separated list, items should be uppercase
and not contain the colon, e.g. \(lqX\-BOGOSITY X\-SPAM\-STATUS\(rq for the
\(lqX\-Bogosity:\(rq and \(lqX\-Spam\-Status:\(rq header fields.


.TP
.B imap_idle
.nf
Type: boolean
Default: no
.fi
.IP
When \fIset\fP, mutt will attempt to use the IMAP IDLE extension
to check for new mail in the current mailbox. Some servers
(dovecot was the inspiration for this option) react badly
to mutt's implementation. If your connection seems to freeze
up periodically, try unsetting this.


.TP
.B imap_keepalive
.nf
Type: number
Default: 900
.fi
.IP
This variable specifies the maximum amount of time in seconds that mutt
will wait before polling open IMAP connections, to prevent the server
from closing them before mutt has finished with them. The default is
well within the RFC\-specified minimum amount of time (30 minutes) before
a server is allowed to do this, but in practice the RFC does get
violated every now and then. Reduce this number if you find yourself
getting disconnected from your IMAP server due to inactivity.


.TP
.B imap_list_subscribed
.nf
Type: boolean
Default: no
.fi
.IP
This variable configures whether IMAP folder browsing will look for
only subscribed folders or all folders.  This can be toggled in the
IMAP browser with the \fC<toggle\-subscribed>\fP function.


.TP
.B imap_login
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
Your login name on the IMAP server.
.IP
This variable defaults to the value of $imap_user.


.TP
.B imap_pass
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
Specifies the password for your IMAP account.  If \fIunset\fP, Mutt will
prompt you for your password when you invoke the \fC<imap\-fetch\-mail>\fP function
or try to open an IMAP folder.
.IP
\fBWarning\fP: you should only use this option when you are on a
fairly secure machine, because the superuser can read your muttrc even
if you are the only one who can read the file.


.TP
.B imap_passive
.nf
Type: boolean
Default: yes
.fi
.IP
When \fIset\fP, mutt will not open new IMAP connections to check for new
mail.  Mutt will only check for new mail over existing IMAP
connections.  This is useful if you don't want to be prompted to
user/password pairs on mutt invocation, or if opening the connection
is slow.


.TP
.B imap_peek
.nf
Type: boolean
Default: yes
.fi
.IP
When \fIset\fP, mutt will avoid implicitly marking your mail as read whenever
you fetch a message from the server. This is generally a good thing,
but can make closing an IMAP folder somewhat slower. This option
exists to appease speed freaks.


.TP
.B imap_pipeline_depth
.nf
Type: number
Default: 15
.fi
.IP
Controls the number of IMAP commands that may be queued up before they
are sent to the server. A deeper pipeline reduces the amount of time
mutt must wait for the server, and can make IMAP servers feel much
more responsive. But not all servers correctly handle pipelined commands,
so if you have problems you might want to try setting this variable to 0.
.IP
\fBNote:\fP Changes to this variable have no effect on open connections.


.TP
.B imap_servernoise
.nf
Type: boolean
Default: yes
.fi
.IP
When \fIset\fP, mutt will display warning messages from the IMAP
server as error messages. Since these messages are often
harmless, or generated due to configuration problems on the
server which are out of the users' hands, you may wish to suppress
them at some point.


.TP
.B imap_user
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
The name of the user whose mail you intend to access on the IMAP
server.
.IP
This variable defaults to your user name on the local machine.


.TP
.B implicit_autoview
.nf
Type: boolean
Default: no
.fi
.IP
If set to \(lqyes\(rq, mutt will look for a mailcap entry with the
\(lq\fCcopiousoutput\fP\(rq flag set for \fIevery\fP MIME attachment it doesn't have
an internal viewer defined for.  If such an entry is found, mutt will
use the viewer defined in that entry to convert the body part to text
form.


.TP
.B include
.nf
Type: quadoption
Default: ask\-yes
.fi
.IP
Controls whether or not a copy of the message(s) you are replying to
is included in your reply.


.TP
.B include_onlyfirst
.nf
Type: boolean
Default: no
.fi
.IP
Controls whether or not Mutt includes only the first attachment
of the message you are replying.


.TP
.B indent_string
.nf
Type: string
Default: \(lq> \(rq
.fi
.IP
Specifies the string to prepend to each line of text quoted in a
message to which you are replying.  You are strongly encouraged not to
change this value, as it tends to agitate the more fanatical netizens.
.IP
The value of this option is ignored if $text_flowed is set, too because
the quoting mechanism is strictly defined for format=flowed.
.IP
This option is a format string, please see the description of
$index_format for supported \fCprintf(3)\fP\-style sequences.


.TP
.B index_format
.nf
Type: string
Default: \(lq%4C %Z %{%b %d} %\-15.15L (%?l?%4l&%4c?) %s\(rq
.fi
.IP
This variable allows you to customize the message index display to
your personal taste.
.IP
\(lqFormat strings\(rq are similar to the strings used in the C
function \fCprintf(3)\fP to format output (see the man page for more details).
The following sequences are defined in Mutt:
.RS
.PD 0
.TP
%a 
address of the author
.TP
%A 
reply\-to address (if present; otherwise: address of author)
.TP
%b 
filename of the original message folder (think mailbox)
.TP
%B 
the list to which the letter was sent, or else the folder name (%b).
.TP
%c 
number of characters (bytes) in the message
.TP
%C 
current message number
.TP
%d 
date and time of the message in the format specified by
$date_format converted to sender's time zone
.TP
%D 
date and time of the message in the format specified by
$date_format converted to the local time zone
.TP
%e 
current message number in thread
.TP
%E 
number of messages in current thread
.TP
%f 
sender (address + real name), either From: or Return\-Path:
.TP
%F 
author name, or recipient name if the message is from you
.TP
%H 
spam attribute(s) of this message
.TP
%i 
message\-id of the current message
.TP
%l 
number of lines in the message (does not work with maildir,
mh, and possibly IMAP folders)
.TP
%L 
If an address in the \(lqTo:\(rq or \(lqCc:\(rq header field matches an address
defined by the users \(lqsubscribe\(rq command, this displays
\(rqTo <list\-name>\(rq, otherwise the same as %F.
.TP
%m 
total number of message in the mailbox
.TP
%M 
number of hidden messages if the thread is collapsed.
.TP
%N 
message score
.TP
%n 
author's real name (or address if missing)
.TP
%O 
original save folder where mutt would formerly have
stashed the message: list name or recipient name
if not sent to a list
.TP
%P 
progress indicator for the built\-in pager (how much of the file has been displayed)
.TP
%s 
subject of the message
.TP
%S 
status of the message (\(lqN\(rq/\(lqD\(rq/\(lqd\(rq/\(lq!\(rq/\(lqr\(rq/*)
.TP
%t 
\(lqTo:\(rq field (recipients)
.TP
%T 
the appropriate character from the $to_chars string
.TP
%u 
user (login) name of the author
.TP
%v 
first name of the author, or the recipient if the message is from you
.TP
%X 
number of attachments
(please see the \(lqattachments\(rq section for possible speed effects)
.TP
%y 
\(lqX\-Label:\(rq field, if present
.TP
%Y 
\(lqX\-Label:\(rq field, if present, and \fI(1)\fP not at part of a thread tree,
\fI(2)\fP at the top of a thread, or \fI(3)\fP \(lqX\-Label:\(rq is different from
preceding message's \(lqX\-Label:\(rq.
.TP
%Z 
message status flags
.TP
%{fmt} 
the date and time of the message is converted to sender's
time zone, and \(lqfmt\(rq is expanded by the library function
\fCstrftime(3)\fP; a leading bang disables locales
.TP
%[fmt] 
the date and time of the message is converted to the local
time zone, and \(lqfmt\(rq is expanded by the library function
\fCstrftime(3)\fP; a leading bang disables locales
.TP
%(fmt) 
the local date and time when the message was received.
\(lqfmt\(rq is expanded by the library function \fCstrftime(3)\fP;
a leading bang disables locales
.TP
%<fmt> 
the current local time. \(lqfmt\(rq is expanded by the library
function \fCstrftime(3)\fP; a leading bang disables locales.
.TP
%>X    
right justify the rest of the string and pad with character \(lqX\(rq
.TP
%|X    
pad to the end of the line with character \(lqX\(rq
.TP
%*X    
soft\-fill with character \(lqX\(rq as pad
.RE
.PD 1
.IP
\(lqSoft\-fill\(rq deserves some explanation: Normal right\-justification
will print everything to the left of the \(lq%>\(rq, displaying padding and
whatever lies to the right only if there's room. By contrast,
soft\-fill gives priority to the right\-hand side, guaranteeing space
to display it and showing padding only if there's still room. If
necessary, soft\-fill will eat text leftwards to make room for
rightward text.
.IP
Note that these expandos are supported in
\(lqsave-hook\(rq, \(lqfcc-hook\(rq and \(lqfcc-save-hook\(rq, too.


.TP
.B ispell
.nf
Type: path
Default: \(lq/usr/bin/hunspell\(rq
.fi
.IP
How to invoke ispell (GNU's spell\-checking software).


.TP
.B keep_flagged
.nf
Type: boolean
Default: no
.fi
.IP
If \fIset\fP, read messages marked as flagged will not be moved
from your spool mailbox to your $mbox mailbox, or as a result of
a \(lqmbox-hook\(rq command.


.TP
.B locale
.nf
Type: string
Default: \(lqC\(rq
.fi
.IP
The locale used by \fCstrftime(3)\fP to format dates. Legal values are
the strings your system accepts for the locale environment variable \fC$LC_TIME\fP.


.TP
.B mail_check
.nf
Type: number
Default: 5
.fi
.IP
This variable configures how often (in seconds) mutt should look for
new mail. Also see the $timeout variable.


.TP
.B mail_check_recent
.nf
Type: boolean
Default: yes
.fi
.IP
When \fIset\fP, Mutt will only notify you about new mail that has been received
since the last time you opened the mailbox.  When \fIunset\fP, Mutt will notify you
if any new mail exists in the mailbox, regardless of whether you have visited it
recently.
.IP
When \fI$mark_old\fP is set, Mutt does not consider the mailbox to contain new
mail if only old messages exist.


.TP
.B mailcap_path
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This variable specifies which files to consult when attempting to
display MIME bodies not directly supported by Mutt.


.TP
.B mailcap_sanitize
.nf
Type: boolean
Default: yes
.fi
.IP
If \fIset\fP, mutt will restrict possible characters in mailcap % expandos
to a well\-defined set of safe characters.  This is the safe setting,
but we are not sure it doesn't break some more advanced MIME stuff.
.IP
\fBDON'T CHANGE THIS SETTING UNLESS YOU ARE REALLY SURE WHAT YOU ARE
DOING!\fP


.TP
.B maildir_header_cache_verify
.nf
Type: boolean
Default: yes
.fi
.IP
Check for Maildir unaware programs other than mutt having modified maildir
files when the header cache is in use.  This incurs one \fCstat(2)\fP per
message every time the folder is opened (which can be very slow for NFS
folders).


.TP
.B maildir_trash
.nf
Type: boolean
Default: no
.fi
.IP
If \fIset\fP, messages marked as deleted will be saved with the maildir
trashed flag instead of unlinked.  \fBNote:\fP this only applies
to maildir\-style mailboxes.  Setting it will have no effect on other
mailbox types.


.TP
.B mark_old
.nf
Type: boolean
Default: yes
.fi
.IP
Controls whether or not mutt marks \fInew\fP \fBunread\fP
messages as \fIold\fP if you exit a mailbox without reading them.
With this option \fIset\fP, the next time you start mutt, the messages
will show up with an \(lqO\(rq next to them in the index menu,
indicating that they are old.


.TP
.B markers
.nf
Type: boolean
Default: yes
.fi
.IP
Controls the display of wrapped lines in the internal pager. If set, a
\(lq+\(rq marker is displayed at the beginning of wrapped lines.
.IP
Also see the $smart_wrap variable.


.TP
.B mask
.nf
Type: regular expression
Default: \(lq!^\\.[^.]\(rq
.fi
.IP
A regular expression used in the file browser, optionally preceded by
the \fInot\fP operator \(lq!\(rq.  Only files whose names match this mask
will be shown. The match is always case\-sensitive.


.TP
.B mbox
.nf
Type: path
Default: \(lq~/mbox\(rq
.fi
.IP
This specifies the folder into which read mail in your $spoolfile
folder will be appended.
.IP
Also see the $move variable.


.TP
.B mbox_type
.nf
Type: folder magic
Default: mbox
.fi
.IP
The default mailbox type used when creating new folders. May be any of
\(lqmbox\(rq, \(lqMMDF\(rq, \(lqMH\(rq and \(lqMaildir\(rq. This is overridden by the
\fC\-m\fP command\-line option.


.TP
.B menu_context
.nf
Type: number
Default: 0
.fi
.IP
This variable controls the number of lines of context that are given
when scrolling through menus. (Similar to $pager_context.)


.TP
.B menu_move_off
.nf
Type: boolean
Default: yes
.fi
.IP
When \fIunset\fP, the bottom entry of menus will never scroll up past
the bottom of the screen, unless there are less entries than lines.
When \fIset\fP, the bottom entry may move off the bottom.


.TP
.B menu_scroll
.nf
Type: boolean
Default: no
.fi
.IP
When \fIset\fP, menus will be scrolled up or down one line when you
attempt to move across a screen boundary.  If \fIunset\fP, the screen
is cleared and the next or previous page of the menu is displayed
(useful for slow links to avoid many redraws).


.TP
.B message_cache_clean
.nf
Type: boolean
Default: no
.fi
.IP
If \fIset\fP, mutt will clean out obsolete entries from the message cache when
the mailbox is synchronized. You probably only want to set it
every once in a while, since it can be a little slow
(especially for large folders).


.TP
.B message_cachedir
.nf
Type: path
Default: \(lq\(rq
.fi
.IP
Set this to a directory and mutt will cache copies of messages from
your IMAP and POP servers here. You are free to remove entries at any
time.
.IP
When setting this variable to a directory, mutt needs to fetch every
remote message only once and can perform regular expression searches
as fast as for local folders.
.IP
Also see the $message_cache_clean variable.


.TP
.B message_format
.nf
Type: string
Default: \(lq%s\(rq
.fi
.IP
This is the string displayed in the \(lqattachment\(rq menu for
attachments of type \fCmessage/rfc822\fP.  For a full listing of defined
\fCprintf(3)\fP\-like sequences see the section on $index_format.


.TP
.B meta_key
.nf
Type: boolean
Default: no
.fi
.IP
If \fIset\fP, forces Mutt to interpret keystrokes with the high bit (bit 8)
set as if the user had pressed the Esc key and whatever key remains
after having the high bit removed.  For example, if the key pressed
has an ASCII value of \fC0xf8\fP, then this is treated as if the user had
pressed Esc then \(lqx\(rq.  This is because the result of removing the
high bit from \fC0xf8\fP is \fC0x78\fP, which is the ASCII character
\(lqx\(rq.


.TP
.B metoo
.nf
Type: boolean
Default: no
.fi
.IP
If \fIunset\fP, Mutt will remove your address (see the \(lqalternates\(rq
command) from the list of recipients when replying to a message.


.TP
.B mh_purge
.nf
Type: boolean
Default: no
.fi
.IP
When \fIunset\fP, mutt will mimic mh's behavior and rename deleted messages
to \fI,<old file name>\fP in mh folders instead of really deleting
them. This leaves the message on disk but makes programs reading the folder
ignore it. If the variable is \fIset\fP, the message files will simply be
deleted.
.IP
This option is similar to $maildir_trash for Maildir folders.


.TP
.B mh_seq_flagged
.nf
Type: string
Default: \(lqflagged\(rq
.fi
.IP
The name of the MH sequence used for flagged messages.


.TP
.B mh_seq_replied
.nf
Type: string
Default: \(lqreplied\(rq
.fi
.IP
The name of the MH sequence used to tag replied messages.


.TP
.B mh_seq_unseen
.nf
Type: string
Default: \(lqunseen\(rq
.fi
.IP
The name of the MH sequence used for unseen messages.


.TP
.B mime_forward
.nf
Type: quadoption
Default: no
.fi
.IP
When \fIset\fP, the message you are forwarding will be attached as a
separate \fCmessage/rfc822\fP MIME part instead of included in the main body of the
message.  This is useful for forwarding MIME messages so the receiver
can properly view the message as it was delivered to you. If you like
to switch between MIME and not MIME from mail to mail, set this
variable to \(lqask\-no\(rq or \(lqask\-yes\(rq.
.IP
Also see $forward_decode and $mime_forward_decode.


.TP
.B mime_forward_decode
.nf
Type: boolean
Default: no
.fi
.IP
Controls the decoding of complex MIME messages into \fCtext/plain\fP when
forwarding a message while $mime_forward is \fIset\fP. Otherwise
$forward_decode is used instead.


.TP
.B mime_forward_rest
.nf
Type: quadoption
Default: yes
.fi
.IP
When forwarding multiple attachments of a MIME message from the attachment
menu, attachments which cannot be decoded in a reasonable manner will
be attached to the newly composed message if this option is \fIset\fP.


.TP
.B move
.nf
Type: quadoption
Default: no
.fi
.IP
Controls whether or not Mutt will move read messages
from your spool mailbox to your $mbox mailbox, or as a result of
a \(lqmbox-hook\(rq command.


.TP
.B narrow_tree
.nf
Type: boolean
Default: no
.fi
.IP
This variable, when \fIset\fP, makes the thread tree narrower, allowing
deeper threads to fit on the screen.


.TP
.B net_inc
.nf
Type: number
Default: 10
.fi
.IP
Operations that expect to transfer a large amount of data over the
network will update their progress every $net_inc kilobytes.
If set to 0, no progress messages will be displayed.
.IP
See also $read_inc, $write_inc and $net_inc.


.TP
.B pager
.nf
Type: path
Default: \(lqbuiltin\(rq
.fi
.IP
This variable specifies which pager you would like to use to view
messages. The value \(lqbuiltin\(rq means to use the built\-in pager, otherwise this
variable should specify the pathname of the external pager you would
like to use.
.IP
Using an external pager may have some disadvantages: Additional
keystrokes are necessary because you can't call mutt functions
directly from the pager, and screen resizes cause lines longer than
the screen width to be badly formatted in the help menu.


.TP
.B pager_context
.nf
Type: number
Default: 0
.fi
.IP
This variable controls the number of lines of context that are given
when displaying the next or previous page in the internal pager.  By
default, Mutt will display the line after the last one on the screen
at the top of the next page (0 lines of context).
.IP
This variable also specifies the amount of context given for search
results. If positive, this many lines will be given before a match,
if 0, the match will be top\-aligned.


.TP
.B pager_format
.nf
Type: string
Default: \(lq\-%Z\- %C/%m: %\-20.20n   %s%*  \-\- (%P)\(rq
.fi
.IP
This variable controls the format of the one\-line message \(lqstatus\(rq
displayed before each message in either the internal or an external
pager.  The valid sequences are listed in the $index_format
section.


.TP
.B pager_index_lines
.nf
Type: number
Default: 0
.fi
.IP
Determines the number of lines of a mini\-index which is shown when in
the pager.  The current message, unless near the top or bottom of the
folder, will be roughly one third of the way down this mini\-index,
giving the reader the context of a few messages before and after the
message.  This is useful, for example, to determine how many messages
remain to be read in the current thread.  One of the lines is reserved
for the status bar from the index, so a setting of 6
will only show 5 lines of the actual index.  A value of 0 results in
no index being shown.  If the number of messages in the current folder
is less than $pager_index_lines, then the index will only use as
many lines as it needs.


.TP
.B pager_stop
.nf
Type: boolean
Default: no
.fi
.IP
When \fIset\fP, the internal\-pager will \fBnot\fP move to the next message
when you are at the end of a message and invoke the \fC<next\-page>\fP
function.


.TP
.B pgp_auto_decode
.nf
Type: boolean
Default: no
.fi
.IP
If \fIset\fP, mutt will automatically attempt to decrypt traditional PGP
messages whenever the user performs an operation which ordinarily would
result in the contents of the message being operated on.  For example,
if the user displays a pgp\-traditional message which has not been manually
checked with the \fC<check-traditional-pgp>\fP function, mutt will automatically
check the message for traditional pgp.


.TP
.B pgp_autoinline
.nf
Type: boolean
Default: no
.fi
.IP
This option controls whether Mutt generates old\-style inline
(traditional) PGP encrypted or signed messages under certain
circumstances.  This can be overridden by use of the pgp menu,
when inline is not required.
.IP
Note that Mutt might automatically use PGP/MIME for messages
which consist of more than a single MIME part.  Mutt can be
configured to ask before sending PGP/MIME messages when inline
(traditional) would not work.
.IP
Also see the $pgp_mime_auto variable.
.IP
Also note that using the old\-style PGP message format is \fBstrongly\fP
\fBdeprecated\fP.
(PGP only)


.TP
.B pgp_check_exit
.nf
Type: boolean
Default: yes
.fi
.IP
If \fIset\fP, mutt will check the exit code of the PGP subprocess when
signing or encrypting.  A non\-zero exit code means that the
subprocess failed.
(PGP only)


.TP
.B pgp_clearsign_command
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This format is used to create an old\-style \(lqclearsigned\(rq PGP
message.  Note that the use of this format is \fBstrongly\fP
\fBdeprecated\fP.
.IP
This is a format string, see the $pgp_decode_command command for
possible \fCprintf(3)\fP\-like sequences.
(PGP only)


.TP
.B pgp_decode_command
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This format strings specifies a command which is used to decode
application/pgp attachments.
.IP
The PGP command formats have their own set of \fCprintf(3)\fP\-like sequences:
.RS
.PD 0
.TP
%p 
Expands to PGPPASSFD=0 when a pass phrase is needed, to an empty
string otherwise. Note: This may be used with a %? construct.
.TP
%f 
Expands to the name of a file containing a message.
.TP
%s 
Expands to the name of a file containing the signature part
           of a \fCmultipart/signed\fP attachment when verifying it.
.TP
%a 
The value of $pgp_sign_as.
.TP
%r 
One or more key IDs.
.RE
.PD 1
.IP
For examples on how to configure these formats for the various versions
of PGP which are floating around, see the pgp and gpg sample configuration files in
the \fCsamples/\fP subdirectory which has been installed on your system
alongside the documentation.
(PGP only)


.TP
.B pgp_decrypt_command
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This command is used to decrypt a PGP encrypted message.
.IP
This is a format string, see the $pgp_decode_command command for
possible \fCprintf(3)\fP\-like sequences.
(PGP only)


.TP
.B pgp_encrypt_only_command
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This command is used to encrypt a body part without signing it.
.IP
This is a format string, see the $pgp_decode_command command for
possible \fCprintf(3)\fP\-like sequences.
(PGP only)


.TP
.B pgp_encrypt_sign_command
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This command is used to both sign and encrypt a body part.
.IP
This is a format string, see the $pgp_decode_command command for
possible \fCprintf(3)\fP\-like sequences.
(PGP only)


.TP
.B pgp_entry_format
.nf
Type: string
Default: \(lq%4n %t%f %4l/0x%k %\-4a %2c %u\(rq
.fi
.IP
This variable allows you to customize the PGP key selection menu to
your personal taste. This string is similar to $index_format, but
has its own set of \fCprintf(3)\fP\-like sequences:
.RS
.PD 0
.TP
%n     
number
.TP
%k     
key id
.TP
%u     
user id
.TP
%a     
algorithm
.TP
%l     
key length
.TP
%f     
flags
.TP
%c     
capabilities
.TP
%t     
trust/validity of the key\-uid association
.TP
%[<s>] 
date of the key where <s> is an \fCstrftime(3)\fP expression
.RE
.PD 1
.IP
(PGP only)


.TP
.B pgp_export_command
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This command is used to export a public key from the user's
key ring.
.IP
This is a format string, see the $pgp_decode_command command for
possible \fCprintf(3)\fP\-like sequences.
(PGP only)


.TP
.B pgp_getkeys_command
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This command is invoked whenever mutt will need public key information.
Of the sequences supported by $pgp_decode_command, %r is the only
\fCprintf(3)\fP\-like sequence used with this format.
(PGP only)


.TP
.B pgp_good_sign
.nf
Type: regular expression
Default: \(lq\(rq
.fi
.IP
If you assign a text to this variable, then a PGP signature is only
considered verified if the output from $pgp_verify_command contains
the text. Use this variable if the exit code from the command is 0
even for bad signatures.
(PGP only)


.TP
.B pgp_ignore_subkeys
.nf
Type: boolean
Default: yes
.fi
.IP
Setting this variable will cause Mutt to ignore OpenPGP subkeys. Instead,
the principal key will inherit the subkeys' capabilities.  \fIUnset\fP this
if you want to play interesting key selection games.
(PGP only)


.TP
.B pgp_import_command
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This command is used to import a key from a message into
the user's public key ring.
.IP
This is a format string, see the $pgp_decode_command command for
possible \fCprintf(3)\fP\-like sequences.
(PGP only)


.TP
.B pgp_list_pubring_command
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This command is used to list the public key ring's contents.  The
output format must be analogous to the one used by

.IP
.DS
.sp
.ft CR
.nf
gpg \-\-list\-keys \-\-with\-colons.

.fi
.ec
.ft P
.sp
.IP
This format is also generated by the \fCpgpring\fP utility which comes
with mutt.
.IP
This is a format string, see the $pgp_decode_command command for
possible \fCprintf(3)\fP\-like sequences.
(PGP only)


.TP
.B pgp_list_secring_command
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This command is used to list the secret key ring's contents.  The
output format must be analogous to the one used by:

.IP
.DS
.sp
.ft CR
.nf
gpg \-\-list\-keys \-\-with\-colons.

.fi
.ec
.ft P
.sp
.IP
This format is also generated by the \fCpgpring\fP utility which comes
with mutt.
.IP
This is a format string, see the $pgp_decode_command command for
possible \fCprintf(3)\fP\-like sequences.
(PGP only)


.TP
.B pgp_long_ids
.nf
Type: boolean
Default: no
.fi
.IP
If \fIset\fP, use 64 bit PGP key IDs, if \fIunset\fP use the normal 32 bit key IDs.
(PGP only)


.TP
.B pgp_mime_auto
.nf
Type: quadoption
Default: ask\-yes
.fi
.IP
This option controls whether Mutt will prompt you for
automatically sending a (signed/encrypted) message using
PGP/MIME when inline (traditional) fails (for any reason).
.IP
Also note that using the old\-style PGP message format is \fBstrongly\fP
\fBdeprecated\fP.
(PGP only)


.TP
.B pgp_replyinline
.nf
Type: boolean
Default: no
.fi
.IP
Setting this variable will cause Mutt to always attempt to
create an inline (traditional) message when replying to a
message which is PGP encrypted/signed inline.  This can be
overridden by use of the pgp menu, when inline is not
required.  This option does not automatically detect if the
(replied\-to) message is inline; instead it relies on Mutt
internals for previously checked/flagged messages.
.IP
Note that Mutt might automatically use PGP/MIME for messages
which consist of more than a single MIME part.  Mutt can be
configured to ask before sending PGP/MIME messages when inline
(traditional) would not work.
.IP
Also see the $pgp_mime_auto variable.
.IP
Also note that using the old\-style PGP message format is \fBstrongly\fP
\fBdeprecated\fP.
(PGP only)


.TP
.B pgp_retainable_sigs
.nf
Type: boolean
Default: no
.fi
.IP
If \fIset\fP, signed and encrypted messages will consist of nested
\fCmultipart/signed\fP and \fCmultipart/encrypted\fP body parts.
.IP
This is useful for applications like encrypted and signed mailing
lists, where the outer layer (\fCmultipart/encrypted\fP) can be easily
removed, while the inner \fCmultipart/signed\fP part is retained.
(PGP only)


.TP
.B pgp_show_unusable
.nf
Type: boolean
Default: yes
.fi
.IP
If \fIset\fP, mutt will display non\-usable keys on the PGP key selection
menu.  This includes keys which have been revoked, have expired, or
have been marked as \(lqdisabled\(rq by the user.
(PGP only)


.TP
.B pgp_sign_as
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
If you have more than one key pair, this option allows you to specify
which of your private keys to use.  It is recommended that you use the
keyid form to specify your key (e.g. \fC0x00112233\fP).
(PGP only)


.TP
.B pgp_sign_command
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This command is used to create the detached PGP signature for a
\fCmultipart/signed\fP PGP/MIME body part.
.IP
This is a format string, see the $pgp_decode_command command for
possible \fCprintf(3)\fP\-like sequences.
(PGP only)


.TP
.B pgp_sort_keys
.nf
Type: sort order
Default: address
.fi
.IP
Specifies how the entries in the pgp menu are sorted. The
following are legal values:
.RS
.PD 0
.TP
address 
sort alphabetically by user id
.TP
keyid   
sort alphabetically by key id
.TP
date    
sort by key creation date
.TP
trust   
sort by the trust of the key
.RE
.PD 1
.IP
If you prefer reverse order of the above values, prefix it with
\(lqreverse\-\(rq.
(PGP only)


.TP
.B pgp_strict_enc
.nf
Type: boolean
Default: yes
.fi
.IP
If \fIset\fP, Mutt will automatically encode PGP/MIME signed messages as
quoted\-printable.  Please note that unsetting this variable may
lead to problems with non\-verifyable PGP signatures, so only change
this if you know what you are doing.
(PGP only)


.TP
.B pgp_timeout
.nf
Type: number
Default: 300
.fi
.IP
The number of seconds after which a cached passphrase will expire if
not used.
(PGP only)


.TP
.B sidebar_delim
.nf
Type: string
Default: \(lq|\(rq
.fi
.IP
This specifies the delimiter between the sidebar (if visible) and 
other screens.


.TP
.B sidebar_indentstr
.nf
Type: string
Default: \(lq \(rq
.fi
.IP
This specifies the string that is used to indent items
with sidebar_folderindent= yes


.TP
.B sidebar_visible
.nf
Type: boolean
Default: no
.fi
.IP
This specifies whether or not to show sidebar (left\-side list of folders).


.TP
.B sidebar_sort
.nf
Type: boolean
Default: no
.fi
.IP
This specifies whether or not to sort the sidebar alphabetically.


.TP
.B sidebar_width
.nf
Type: number
Default: 0
.fi
.IP
The width of the sidebar.


.TP
.B sidebar_shortpath
.nf
Type: boolean
Default: no
.fi
.IP
Should the sidebar shorten the path showed.


.TP
.B sidebar_format
.nf
Type: string
Default: \(lq%B%?F? [%F]?%* %?N?%N/?%4S\(rq
.fi
.IP
Format string for the sidebar. The sequences `%N', `%F' and `%S'
will be replaced by the number of new or flagged messages or the total
size of them mailbox. `%B' will be replaced with the name of the mailbox.
The `%!' sequence will be expanded to `!' if there is one flagged message;
to `!!' if there are two flagged messages; and to `n!' for n flagged
messages, n>2.


.TP
.B sidebar_folderindent
.nf
Type: boolean
Default: no
.fi
.IP
Should folders be indented in the sidebar.


.TP
.B pgp_use_gpg_agent
.nf
Type: boolean
Default: no
.fi
.IP
If \fIset\fP, mutt will use a possibly\-running \fCgpg\-agent(1)\fP process.
(PGP only)


.TP
.B pgp_verify_command
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This command is used to verify PGP signatures.
.IP
This is a format string, see the $pgp_decode_command command for
possible \fCprintf(3)\fP\-like sequences.
(PGP only)


.TP
.B pgp_verify_key_command
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This command is used to verify key information from the key selection
menu.
.IP
This is a format string, see the $pgp_decode_command command for
possible \fCprintf(3)\fP\-like sequences.
(PGP only)


.TP
.B pipe_decode
.nf
Type: boolean
Default: no
.fi
.IP
Used in connection with the \fC<pipe\-message>\fP command.  When \fIunset\fP,
Mutt will pipe the messages without any preprocessing. When \fIset\fP, Mutt
will weed headers and will attempt to decode the messages
first.


.TP
.B pipe_sep
.nf
Type: string
Default: \(lq\\n\(rq
.fi
.IP
The separator to add between messages when piping a list of tagged
messages to an external Unix command.


.TP
.B pipe_split
.nf
Type: boolean
Default: no
.fi
.IP
Used in connection with the \fC<pipe\-message>\fP function following
\fC<tag\-prefix>\fP.  If this variable is \fIunset\fP, when piping a list of
tagged messages Mutt will concatenate the messages and will pipe them
all concatenated.  When \fIset\fP, Mutt will pipe the messages one by one.
In both cases the messages are piped in the current sorted order,
and the $pipe_sep separator is added after each message.


.TP
.B pop_auth_try_all
.nf
Type: boolean
Default: yes
.fi
.IP
If \fIset\fP, Mutt will try all available authentication methods.
When \fIunset\fP, Mutt will only fall back to other authentication
methods if the previous methods are unavailable. If a method is
available but authentication fails, Mutt will not connect to the POP server.


.TP
.B pop_authenticators
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This is a colon\-delimited list of authentication methods mutt may
attempt to use to log in to an POP server, in the order mutt should
try them.  Authentication methods are either \(lquser\(rq, \(lqapop\(rq or any
SASL mechanism, e.g. \(lqdigest\-md5\(rq, \(lqgssapi\(rq or \(lqcram\-md5\(rq.
This option is case\-insensitive. If this option is \fIunset\fP
(the default) mutt will try all available methods, in order from
most\-secure to least\-secure.
.IP
Example:

.IP
.DS
.sp
.ft CR
.nf
set pop_authenticators=\(rqdigest\-md5:apop:user\(rq

.fi
.ec
.ft P
.sp


.TP
.B pop_checkinterval
.nf
Type: number
Default: 60
.fi
.IP
This variable configures how often (in seconds) mutt should look for
new mail in the currently selected mailbox if it is a POP mailbox.


.TP
.B pop_delete
.nf
Type: quadoption
Default: ask\-no
.fi
.IP
If \fIset\fP, Mutt will delete successfully downloaded messages from the POP
server when using the \fC<fetch-mail>\fP function.  When \fIunset\fP, Mutt will
download messages but also leave them on the POP server.


.TP
.B pop_host
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
The name of your POP server for the \fC<fetch-mail>\fP function.  You
can also specify an alternative port, username and password, i.e.:

.IP
.DS
.sp
.ft CR
.nf
[pop[s]://][username[:password]@]popserver[:port]

.fi
.ec
.ft P
.sp
.IP
where \(lq[...]\(rq denotes an optional part.


.TP
.B pop_last
.nf
Type: boolean
Default: no
.fi
.IP
If this variable is \fIset\fP, mutt will try to use the \(lq\fCLAST\fP\(rq POP command
for retrieving only unread messages from the POP server when using
the \fC<fetch-mail>\fP function.


.TP
.B pop_pass
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
Specifies the password for your POP account.  If \fIunset\fP, Mutt will
prompt you for your password when you open a POP mailbox.
.IP
\fBWarning\fP: you should only use this option when you are on a
fairly secure machine, because the superuser can read your muttrc
even if you are the only one who can read the file.


.TP
.B pop_reconnect
.nf
Type: quadoption
Default: ask\-yes
.fi
.IP
Controls whether or not Mutt will try to reconnect to the POP server if
the connection is lost.


.TP
.B pop_user
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
Your login name on the POP server.
.IP
This variable defaults to your user name on the local machine.


.TP
.B post_indent_string
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
Similar to the $attribution variable, Mutt will append this
string after the inclusion of a message which is being replied to.


.TP
.B postpone
.nf
Type: quadoption
Default: ask\-yes
.fi
.IP
Controls whether or not messages are saved in the $postponed
mailbox when you elect not to send immediately.
.IP
Also see the $recall variable.


.TP
.B postponed
.nf
Type: path
Default: \(lq~/postponed\(rq
.fi
.IP
Mutt allows you to indefinitely \(lqpostpone sending a message\(rq which
you are editing.  When you choose to postpone a message, Mutt saves it
in the mailbox specified by this variable.
.IP
Also see the $postpone variable.


.TP
.B preconnect
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
If \fIset\fP, a shell command to be executed if mutt fails to establish
a connection to the server. This is useful for setting up secure
connections, e.g. with \fCssh(1)\fP. If the command returns a  nonzero
status, mutt gives up opening the server. Example:

.IP
.DS
.sp
.ft CR
.nf
set preconnect=\(rqssh \-f \-q \-L 1234:mailhost.net:143 mailhost.net \\
sleep 20 < /dev/null > /dev/null\(rq

.fi
.ec
.ft P
.sp
.IP
Mailbox \(lqfoo\(rq on \(lqmailhost.net\(rq can now be reached
as \(lq{localhost:1234}foo\(rq.
.IP
Note: For this example to work, you must be able to log in to the
remote machine without having to enter a password.


.TP
.B print
.nf
Type: quadoption
Default: ask\-no
.fi
.IP
Controls whether or not Mutt really prints messages.
This is set to \(lqask\-no\(rq by default, because some people
accidentally hit \(lqp\(rq often.


.TP
.B print_command
.nf
Type: path
Default: \(lqlpr\(rq
.fi
.IP
This specifies the command pipe that should be used to print messages.


.TP
.B print_decode
.nf
Type: boolean
Default: yes
.fi
.IP
Used in connection with the \fC<print\-message>\fP command.  If this
option is \fIset\fP, the message is decoded before it is passed to the
external command specified by $print_command.  If this option
is \fIunset\fP, no processing will be applied to the message when
printing it.  The latter setting may be useful if you are using
some advanced printer filter which is able to properly format
e\-mail messages for printing.


.TP
.B print_split
.nf
Type: boolean
Default: no
.fi
.IP
Used in connection with the \fC<print\-message>\fP command.  If this option
is \fIset\fP, the command specified by $print_command is executed once for
each message which is to be printed.  If this option is \fIunset\fP,
the command specified by $print_command is executed only once, and
all the messages are concatenated, with a form feed as the message
separator.
.IP
Those who use the \fCenscript\fP(1) program's mail\-printing mode will
most likely want to \fIset\fP this option.


.TP
.B prompt_after
.nf
Type: boolean
Default: yes
.fi
.IP
If you use an \fIexternal\fP $pager, setting this variable will
cause Mutt to prompt you for a command when the pager exits rather
than returning to the index menu.  If \fIunset\fP, Mutt will return to the
index menu when the external pager exits.


.TP
.B query_command
.nf
Type: path
Default: \(lq\(rq
.fi
.IP
This specifies the command Mutt will use to make external address
queries.  The string may contain a \(lq%s\(rq, which will be substituted
with the query string the user types.  Mutt will add quotes around the
string substituted for \(lq%s\(rq automatically according to shell quoting
rules, so you should avoid adding your own.  If no \(lq%s\(rq is found in
the string, Mutt will append the user's query to the end of the string.
See \(lqquery\(rq for more information.


.TP
.B query_format
.nf
Type: string
Default: \(lq%4c %t %\-25.25a %\-25.25n %?e?(%e)?\(rq
.fi
.IP
This variable describes the format of the \(lqquery\(rq menu. The
following \fCprintf(3)\fP\-style sequences are understood:
.RS
.PD 0
.TP
%a  
destination address
.TP
%c  
current entry number
.TP
%e  
extra information *
.TP
%n  
destination name
.TP
%t  
\(lq*\(rq if current entry is tagged, a space otherwise
.TP
%>X 
right justify the rest of the string and pad with \(lqX\(rq
.TP
%|X 
pad to the end of the line with \(lqX\(rq
.TP
%*X 
soft\-fill with character \(lqX\(rq as pad
.RE
.PD 1
.IP
For an explanation of \(lqsoft\-fill\(rq, see the $index_format documentation.
.IP
* = can be optionally printed if nonzero, see the $status_format documentation.


.TP
.B quit
.nf
Type: quadoption
Default: yes
.fi
.IP
This variable controls whether \(lqquit\(rq and \(lqexit\(rq actually quit
from mutt.  If this option is \fIset\fP, they do quit, if it is \fIunset\fP, they
have no effect, and if it is set to \fIask\-yes\fP or \fIask\-no\fP, you are
prompted for confirmation when you try to quit.


.TP
.B quote_regexp
.nf
Type: regular expression
Default: \(lq^([ \\t]*[|>:}#])+\(rq
.fi
.IP
A regular expression used in the internal pager to determine quoted
sections of text in the body of a message. Quoted text may be filtered
out using the \fC<toggle\-quoted>\fP command, or colored according to the
\(lqcolor quoted\(rq family of directives.
.IP
Higher levels of quoting may be colored differently (\(lqcolor quoted1\(rq,
\(lqcolor quoted2\(rq, etc.). The quoting level is determined by removing
the last character from the matched text and recursively reapplying
the regular expression until it fails to produce a match.
.IP
Match detection may be overridden by the $smileys regular expression.


.TP
.B read_inc
.nf
Type: number
Default: 10
.fi
.IP
If set to a value greater than 0, Mutt will display which message it
is currently on when reading a mailbox or when performing search actions
such as search and limit. The message is printed after
this many messages have been read or searched (e.g., if set to 25, Mutt will
print a message when it is at message 25, and then again when it gets
to message 50).  This variable is meant to indicate progress when
reading or searching large mailboxes which may take some time.
When set to 0, only a single message will appear before the reading
the mailbox.
.IP
Also see the $write_inc, $net_inc and $time_inc variables and the
\(lqtuning\(rq section of the manual for performance considerations.


.TP
.B read_only
.nf
Type: boolean
Default: no
.fi
.IP
If \fIset\fP, all folders are opened in read\-only mode.


.TP
.B realname
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This variable specifies what \(lqreal\(rq or \(lqpersonal\(rq name should be used
when sending messages.
.IP
By default, this is the GECOS field from \fC/etc/passwd\fP.  Note that this
variable will \fInot\fP be used when the user has set a real name
in the $from variable.


.TP
.B recall
.nf
Type: quadoption
Default: ask\-yes
.fi
.IP
Controls whether or not Mutt recalls postponed messages
when composing a new message.
.IP
\fISetting\fP this variable to is not generally useful, and thus not
recommended.
.IP
Also see $postponed variable.


.TP
.B record
.nf
Type: path
Default: \(lq~/sent\(rq
.fi
.IP
This specifies the file into which your outgoing messages should be
appended.  (This is meant as the primary method for saving a copy of
your messages, but another way to do this is using the \(lqmy_hdr\(rq
command to create a \(lqBcc:\(rq field with your email address in it.)
.IP
The value of \fI$record\fP is overridden by the $force_name and
$save_name variables, and the \(lqfcc-hook\(rq command.


.TP
.B reply_regexp
.nf
Type: regular expression
Default: \(lq^(re([\\[0\-9\\]+])*|aw):[ \\t]*\(rq
.fi
.IP
A regular expression used to recognize reply messages when threading
and replying. The default value corresponds to the English \(rqRe:\(rq and
the German \(rqAw:\(rq.


.TP
.B reply_self
.nf
Type: boolean
Default: no
.fi
.IP
If \fIunset\fP and you are replying to a message sent by you, Mutt will
assume that you want to reply to the recipients of that message rather
than to yourself.
.IP
Also see the \(lqalternates\(rq command.


.TP
.B reply_to
.nf
Type: quadoption
Default: ask\-yes
.fi
.IP
If \fIset\fP, when replying to a message, Mutt will use the address listed
in the Reply\-to: header as the recipient of the reply.  If \fIunset\fP,
it will use the address in the From: header field instead.  This
option is useful for reading a mailing list that sets the Reply\-To:
header field to the list address and you want to send a private
message to the author of a message.


.TP
.B resolve
.nf
Type: boolean
Default: yes
.fi
.IP
When \fIset\fP, the cursor will be automatically advanced to the next
(possibly undeleted) message whenever a command that modifies the
current message is executed.


.TP
.B reverse_alias
.nf
Type: boolean
Default: no
.fi
.IP
This variable controls whether or not Mutt will display the \(lqpersonal\(rq
name from your aliases in the index menu if it finds an alias that
matches the message's sender.  For example, if you have the following
alias:

.IP
.DS
.sp
.ft CR
.nf
alias juser abd30425@somewhere.net (Joe User)

.fi
.ec
.ft P
.sp
.IP
and then you receive mail which contains the following header:

.IP
.DS
.sp
.ft CR
.nf
From: abd30425@somewhere.net

.fi
.ec
.ft P
.sp
.IP
It would be displayed in the index menu as \(lqJoe User\(rq instead of
\(lqabd30425@somewhere.net.\(rq  This is useful when the person's e\-mail
address is not human friendly.


.TP
.B reverse_name
.nf
Type: boolean
Default: no
.fi
.IP
It may sometimes arrive that you receive mail to a certain machine,
move the messages to another machine, and reply to some the messages
from there.  If this variable is \fIset\fP, the default \fIFrom:\fP line of
the reply messages is built using the address where you received the
messages you are replying to \fBif\fP that address matches your
\(lqalternates\(rq.  If the variable is \fIunset\fP, or the address that would be
used doesn't match your \(lqalternates\(rq, the \fIFrom:\fP line will use
your address on the current machine.
.IP
Also see the \(lqalternates\(rq command.


.TP
.B reverse_realname
.nf
Type: boolean
Default: yes
.fi
.IP
This variable fine\-tunes the behavior of the $reverse_name feature.
When it is \fIset\fP, mutt will use the address from incoming messages as\-is,
possibly including eventual real names.  When it is \fIunset\fP, mutt will
override any such real names with the setting of the $realname variable.


.TP
.B rfc2047_parameters
.nf
Type: boolean
Default: no
.fi
.IP
When this variable is \fIset\fP, Mutt will decode RFC2047\-encoded MIME
parameters. You want to set this variable when mutt suggests you
to save attachments to files named like:

.IP
.DS
.sp
.ft CR
.nf
=?iso\-8859\-1?Q?file=5F=E4=5F991116=2Ezip?=

.fi
.ec
.ft P
.sp
.IP
When this variable is \fIset\fP interactively, the change won't be
active until you change folders.
.IP
Note that this use of RFC2047's encoding is explicitly
prohibited by the standard, but nevertheless encountered in the
wild.
.IP
Also note that setting this parameter will \fInot\fP have the effect
that mutt \fIgenerates\fP this kind of encoding.  Instead, mutt will
unconditionally use the encoding specified in RFC2231.


.TP
.B save_address
.nf
Type: boolean
Default: no
.fi
.IP
If \fIset\fP, mutt will take the sender's full address when choosing a
default folder for saving a mail. If $save_name or $force_name
is \fIset\fP too, the selection of the Fcc folder will be changed as well.


.TP
.B save_empty
.nf
Type: boolean
Default: yes
.fi
.IP
When \fIunset\fP, mailboxes which contain no saved messages will be removed
when closed (the exception is $spoolfile which is never removed).
If \fIset\fP, mailboxes are never removed.
.IP
\fBNote:\fP This only applies to mbox and MMDF folders, Mutt does not
delete MH and Maildir directories.


.TP
.B save_history
.nf
Type: number
Default: 0
.fi
.IP
This variable controls the size of the history (per category) saved in the
$history_file file.


.TP
.B save_name
.nf
Type: boolean
Default: no
.fi
.IP
This variable controls how copies of outgoing messages are saved.
When \fIset\fP, a check is made to see if a mailbox specified by the
recipient address exists (this is done by searching for a mailbox in
the $folder directory with the \fIusername\fP part of the
recipient address).  If the mailbox exists, the outgoing message will
be saved to that mailbox, otherwise the message is saved to the
$record mailbox.
.IP
Also see the $force_name variable.


.TP
.B score
.nf
Type: boolean
Default: yes
.fi
.IP
When this variable is \fIunset\fP, scoring is turned off.  This can
be useful to selectively disable scoring for certain folders when the
$score_threshold_delete variable and related are used.


.TP
.B score_threshold_delete
.nf
Type: number
Default: \-1
.fi
.IP
Messages which have been assigned a score equal to or lower than the value
of this variable are automatically marked for deletion by mutt.  Since
mutt scores are always greater than or equal to zero, the default setting
of this variable will never mark a message for deletion.


.TP
.B score_threshold_flag
.nf
Type: number
Default: 9999
.fi
.IP
Messages which have been assigned a score greater than or equal to this
variable's value are automatically marked \(rqflagged\(rq.


.TP
.B score_threshold_read
.nf
Type: number
Default: \-1
.fi
.IP
Messages which have been assigned a score equal to or lower than the value
of this variable are automatically marked as read by mutt.  Since
mutt scores are always greater than or equal to zero, the default setting
of this variable will never mark a message read.


.TP
.B search_context
.nf
Type: number
Default: 0
.fi
.IP
For the pager, this variable specifies the number of lines shown
before search results. By default, search results will be top\-aligned.


.TP
.B send_charset
.nf
Type: string
Default: \(lqus\-ascii:iso\-8859\-1:utf\-8\(rq
.fi
.IP
A colon\-delimited list of character sets for outgoing messages. Mutt will use the
first character set into which the text can be converted exactly.
If your $charset is not \(lqiso\-8859\-1\(rq and recipients may not
understand \(lqUTF\-8\(rq, it is advisable to include in the list an
appropriate widely used standard character set (such as
\(lqiso\-8859\-2\(rq, \(lqkoi8\-r\(rq or \(lqiso\-2022\-jp\(rq) either instead of or after
\(lqiso\-8859\-1\(rq.
.IP
In case the text cannot be converted into one of these exactly,
mutt uses $charset as a fallback.


.TP
.B sendmail
.nf
Type: path
Default: \(lq/usr/sbin/sendmail \-oem \-oi\(rq
.fi
.IP
Specifies the program and arguments used to deliver mail sent by Mutt.
Mutt expects that the specified program interprets additional
arguments as recipient addresses.


.TP
.B sendmail_wait
.nf
Type: number
Default: 0
.fi
.IP
Specifies the number of seconds to wait for the $sendmail process
to finish before giving up and putting delivery in the background.
.IP
Mutt interprets the value of this variable as follows:
.RS
.PD 0
.TP
>0 
number of seconds to wait for sendmail to finish before continuing
.TP
0  
wait forever for sendmail to finish
.TP
<0 
always put sendmail in the background without waiting
.RE
.PD 1
.IP
Note that if you specify a value other than 0, the output of the child
process will be put in a temporary file.  If there is some error, you
will be informed as to where to find the output.


.TP
.B shell
.nf
Type: path
Default: \(lq\(rq
.fi
.IP
Command to use when spawning a subshell.  By default, the user's login
shell from \fC/etc/passwd\fP is used.


.TP
.B sig_dashes
.nf
Type: boolean
Default: yes
.fi
.IP
If \fIset\fP, a line containing \(lq\-\- \(rq (note the trailing space) will be inserted before your
$signature.  It is \fBstrongly\fP recommended that you not \fIunset\fP
this variable unless your signature contains just your name.  The
reason for this is because many software packages use \(lq\-\- \\n\(rq to
detect your signature.  For example, Mutt has the ability to highlight
the signature in a different color in the built\-in pager.


.TP
.B sig_on_top
.nf
Type: boolean
Default: no
.fi
.IP
If \fIset\fP, the signature will be included before any quoted or forwarded
text.  It is \fBstrongly\fP recommended that you do not set this variable
unless you really know what you are doing, and are prepared to take
some heat from netiquette guardians.


.TP
.B signature
.nf
Type: path
Default: \(lq~/.signature\(rq
.fi
.IP
Specifies the filename of your signature, which is appended to all
outgoing messages.   If the filename ends with a pipe (\(lq|\(rq), it is
assumed that filename is a shell command and input should be read from
its standard output.


.TP
.B simple_search
.nf
Type: string
Default: \(lq~f %s | ~s %s\(rq
.fi
.IP
Specifies how Mutt should expand a simple search into a real search
pattern.  A simple search is one that does not contain any of the \(lq~\(rq pattern
operators.  See \(lqpatterns\(rq for more information on search patterns.
.IP
For example, if you simply type \(lqjoe\(rq at a search or limit prompt, Mutt
will automatically expand it to the value specified by this variable by
replacing \(lq%s\(rq with the supplied string.
For the default value, \(lqjoe\(rq would be expanded to: \(lq~f joe | ~s joe\(rq.


.TP
.B sleep_time
.nf
Type: number
Default: 1
.fi
.IP
Specifies time, in seconds, to pause while displaying certain informational
messages, while moving from folder to folder and after expunging
messages from the current folder.  The default is to pause one second, so
a value of zero for this option suppresses the pause.


.TP
.B smart_wrap
.nf
Type: boolean
Default: yes
.fi
.IP
Controls the display of lines longer than the screen width in the
internal pager. If \fIset\fP, long lines are wrapped at a word boundary.  If
\fIunset\fP, lines are simply wrapped at the screen edge. Also see the
$markers variable.


.TP
.B smileys
.nf
Type: regular expression
Default: \(lq(>From )|(:[\-^]?[][)(><}{|/DP])\(rq
.fi
.IP
The \fIpager\fP uses this variable to catch some common false
positives of $quote_regexp, most notably smileys and not consider
a line quoted text if it also matches $smileys. This mostly
happens at the beginning of a line.


.TP
.B smime_ask_cert_label
.nf
Type: boolean
Default: yes
.fi
.IP
This flag controls whether you want to be asked to enter a label
for a certificate about to be added to the database or not. It is
\fIset\fP by default.
(S/MIME only)


.TP
.B smime_ca_location
.nf
Type: path
Default: \(lq\(rq
.fi
.IP
This variable contains the name of either a directory, or a file which
contains trusted certificates for use with OpenSSL.
(S/MIME only)


.TP
.B smime_certificates
.nf
Type: path
Default: \(lq\(rq
.fi
.IP
Since for S/MIME there is no pubring/secring as with PGP, mutt has to handle
storage and retrieval of keys by itself. This is very basic right
now, and keys and certificates are stored in two different
directories, both named as the hash\-value retrieved from
OpenSSL. There is an index file which contains mailbox\-address
keyid pairs, and which can be manually edited. This option points to
the location of the certificates.
(S/MIME only)


.TP
.B smime_decrypt_command
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This format string specifies a command which is used to decrypt
\fCapplication/x\-pkcs7\-mime\fP attachments.
.IP
The OpenSSL command formats have their own set of \fCprintf(3)\fP\-like sequences
similar to PGP's:
.RS
.PD 0
.TP
%f 
Expands to the name of a file containing a message.
.TP
%s 
Expands to the name of a file containing the signature part
           of a \fCmultipart/signed\fP attachment when verifying it.
.TP
%k 
The key\-pair specified with $smime_default_key
.TP
%c 
One or more certificate IDs.
.TP
%a 
The algorithm used for encryption.
.TP
%C 
CA location:  Depending on whether $smime_ca_location
           points to a directory or file, this expands to
           \(lq\-CApath $smime_ca_location\(rq or \(lq\-CAfile $smime_ca_location\(rq.
.RE
.PD 1
.IP
For examples on how to configure these formats, see the \fCsmime.rc\fP in
the \fCsamples/\fP subdirectory which has been installed on your system
alongside the documentation.
(S/MIME only)


.TP
.B smime_decrypt_use_default_key
.nf
Type: boolean
Default: yes
.fi
.IP
If \fIset\fP (default) this tells mutt to use the default key for decryption. Otherwise,
if managing multiple certificate\-key\-pairs, mutt will try to use the mailbox\-address
to determine the key to use. It will ask you to supply a key, if it can't find one.
(S/MIME only)


.TP
.B smime_default_key
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This is the default key\-pair to use for signing. This must be set to the
keyid (the hash\-value that OpenSSL generates) to work properly
(S/MIME only)


.TP
.B smime_encrypt_command
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This command is used to create encrypted S/MIME messages.
.IP
This is a format string, see the $smime_decrypt_command command for
possible \fCprintf(3)\fP\-like sequences.
(S/MIME only)


.TP
.B smime_encrypt_with
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This sets the algorithm that should be used for encryption.
Valid choices are \(lqdes\(rq, \(lqdes3\(rq, \(lqrc2\-40\(rq, \(lqrc2\-64\(rq, \(lqrc2\-128\(rq.
If \fIunset\fP, \(lq3des\(rq (TripleDES) is used.
(S/MIME only)


.TP
.B smime_get_cert_command
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This command is used to extract X509 certificates from a PKCS7 structure.
.IP
This is a format string, see the $smime_decrypt_command command for
possible \fCprintf(3)\fP\-like sequences.
(S/MIME only)


.TP
.B smime_get_cert_email_command
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This command is used to extract the mail address(es) used for storing
X509 certificates, and for verification purposes (to check whether the
certificate was issued for the sender's mailbox).
.IP
This is a format string, see the $smime_decrypt_command command for
possible \fCprintf(3)\fP\-like sequences.
(S/MIME only)


.TP
.B smime_get_signer_cert_command
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This command is used to extract only the signers X509 certificate from a S/MIME
signature, so that the certificate's owner may get compared to the
email's \(lqFrom:\(rq field.
.IP
This is a format string, see the $smime_decrypt_command command for
possible \fCprintf(3)\fP\-like sequences.
(S/MIME only)


.TP
.B smime_import_cert_command
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This command is used to import a certificate via smime_keys.
.IP
This is a format string, see the $smime_decrypt_command command for
possible \fCprintf(3)\fP\-like sequences.
(S/MIME only)


.TP
.B smime_is_default
.nf
Type: boolean
Default: no
.fi
.IP
The default behavior of mutt is to use PGP on all auto\-sign/encryption
operations. To override and to use OpenSSL instead this must be \fIset\fP.
However, this has no effect while replying, since mutt will automatically
select the same application that was used to sign/encrypt the original
message.  (Note that this variable can be overridden by unsetting $crypt_autosmime.)
(S/MIME only)


.TP
.B smime_keys
.nf
Type: path
Default: \(lq\(rq
.fi
.IP
Since for S/MIME there is no pubring/secring as with PGP, mutt has to handle
storage and retrieval of keys/certs by itself. This is very basic right now,
and stores keys and certificates in two different directories, both
named as the hash\-value retrieved from OpenSSL. There is an index file
which contains mailbox\-address keyid pair, and which can be manually
edited. This option points to the location of the private keys.
(S/MIME only)


.TP
.B smime_pk7out_command
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This command is used to extract PKCS7 structures of S/MIME signatures,
in order to extract the public X509 certificate(s).
.IP
This is a format string, see the $smime_decrypt_command command for
possible \fCprintf(3)\fP\-like sequences.
(S/MIME only)


.TP
.B smime_sign_command
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This command is used to created S/MIME signatures of type
\fCmultipart/signed\fP, which can be read by all mail clients.
.IP
This is a format string, see the $smime_decrypt_command command for
possible \fCprintf(3)\fP\-like sequences.
(S/MIME only)


.TP
.B smime_sign_opaque_command
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This command is used to created S/MIME signatures of type
\fCapplication/x\-pkcs7\-signature\fP, which can only be handled by mail
clients supporting the S/MIME extension.
.IP
This is a format string, see the $smime_decrypt_command command for
possible \fCprintf(3)\fP\-like sequences.
(S/MIME only)


.TP
.B smime_timeout
.nf
Type: number
Default: 300
.fi
.IP
The number of seconds after which a cached passphrase will expire if
not used.
(S/MIME only)


.TP
.B smime_verify_command
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This command is used to verify S/MIME signatures of type \fCmultipart/signed\fP.
.IP
This is a format string, see the $smime_decrypt_command command for
possible \fCprintf(3)\fP\-like sequences.
(S/MIME only)


.TP
.B smime_verify_opaque_command
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This command is used to verify S/MIME signatures of type
\fCapplication/x\-pkcs7\-mime\fP.
.IP
This is a format string, see the $smime_decrypt_command command for
possible \fCprintf(3)\fP\-like sequences.
(S/MIME only)


.TP
.B smtp_authenticators
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
This is a colon\-delimited list of authentication methods mutt may
attempt to use to log in to an SMTP server, in the order mutt should
try them.  Authentication methods are any SASL mechanism, e.g.
\(lqdigest\-md5\(rq, \(lqgssapi\(rq or \(lqcram\-md5\(rq.
This option is case\-insensitive. If it is \(lqunset\(rq
(the default) mutt will try all available methods, in order from
most\-secure to least\-secure.
.IP
Example:

.IP
.DS
.sp
.ft CR
.nf
set smtp_authenticators=\(rqdigest\-md5:cram\-md5\(rq

.fi
.ec
.ft P
.sp


.TP
.B smtp_pass
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
Specifies the password for your SMTP account.  If \fIunset\fP, Mutt will
prompt you for your password when you first send mail via SMTP.
See $smtp_url to configure mutt to send mail via SMTP.
.IP
\fBWarning\fP: you should only use this option when you are on a
fairly secure machine, because the superuser can read your muttrc even
if you are the only one who can read the file.


.TP
.B smtp_url
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
Defines the SMTP smarthost where sent messages should relayed for
delivery. This should take the form of an SMTP URL, e.g.:

.IP
.DS
.sp
.ft CR
.nf
smtp[s]://[user[:pass]@]host[:port]

.fi
.ec
.ft P
.sp
.IP
where \(lq[...]\(rq denotes an optional part.
Setting this variable overrides the value of the $sendmail
variable.


.TP
.B sort
.nf
Type: sort order
Default: date
.fi
.IP
Specifies how to sort messages in the \(lqindex\(rq menu.  Valid values
are:
.RS
.PD 0
.TP
\(hy date or date\-sent
.TP
\(hy date\-received
.TP
\(hy from
.TP
\(hy mailbox\-order (unsorted)
.TP
\(hy score
.TP
\(hy size
.TP
\(hy spam
.TP
\(hy subject
.TP
\(hy threads
.TP
\(hy to
.RE
.PD 1
.IP
You may optionally use the \(lqreverse\-\(rq prefix to specify reverse sorting
order (example: \(lq\fCset sort=reverse\-date\-sent\fP\(rq).


.TP
.B sort_alias
.nf
Type: sort order
Default: alias
.fi
.IP
Specifies how the entries in the \(lqalias\(rq menu are sorted.  The
following are legal values:
.RS
.PD 0
.TP
\(hy address (sort alphabetically by email address)
.TP
\(hy alias (sort alphabetically by alias name)
.TP
\(hy unsorted (leave in order specified in .muttrc)
.RE
.PD 1

.TP
.B sort_aux
.nf
Type: sort order
Default: date
.fi
.IP
When sorting by threads, this variable controls how threads are sorted
in relation to other threads, and how the branches of the thread trees
are sorted.  This can be set to any value that $sort can, except
\(lqthreads\(rq (in that case, mutt will just use \(lqdate\-sent\(rq).  You can also
specify the \(lqlast\-\(rq prefix in addition to the \(lqreverse\-\(rq prefix, but \(lqlast\-\(rq
must come after \(lqreverse\-\(rq.  The \(lqlast\-\(rq prefix causes messages to be
sorted against its siblings by which has the last descendant, using
the rest of $sort_aux as an ordering.  For instance,

.IP
.DS
.sp
.ft CR
.nf
set sort_aux=last\-date\-received

.fi
.ec
.ft P
.sp
.IP
would mean that if a new message is received in a
thread, that thread becomes the last one displayed (or the first, if
you have \(lq\fCset sort=reverse\-threads\fP\(rq.)
.IP
Note: For reversed $sort
order $sort_aux is reversed again (which is not the right thing to do,
but kept to not break any existing configuration setting).


.TP
.B sort_browser
.nf
Type: sort order
Default: alpha
.fi
.IP
Specifies how to sort entries in the file browser.  By default, the
entries are sorted alphabetically.  Valid values:
.RS
.PD 0
.TP
\(hy alpha (alphabetically)
.TP
\(hy date
.TP
\(hy size
.TP
\(hy unsorted
.RE
.PD 1
.IP
You may optionally use the \(lqreverse\-\(rq prefix to specify reverse sorting
order (example: \(lq\fCset sort_browser=reverse\-date\fP\(rq).


.TP
.B sort_re
.nf
Type: boolean
Default: yes
.fi
.IP
This variable is only useful when sorting by threads with
$strict_threads \fIunset\fP.  In that case, it changes the heuristic
mutt uses to thread messages by subject.  With $sort_re \fIset\fP, mutt will
only attach a message as the child of another message by subject if
the subject of the child message starts with a substring matching the
setting of $reply_regexp.  With $sort_re \fIunset\fP, mutt will attach
the message whether or not this is the case, as long as the
non\-$reply_regexp parts of both messages are identical.


.TP
.B spam_separator
.nf
Type: string
Default: \(lq,\(rq
.fi
.IP
This variable controls what happens when multiple spam headers
are matched: if \fIunset\fP, each successive header will overwrite any
previous matches value for the spam label. If \fIset\fP, each successive
match will append to the previous, using this variable's value as a
separator.


.TP
.B spoolfile
.nf
Type: path
Default: \(lq\(rq
.fi
.IP
If your spool mailbox is in a non\-default place where Mutt cannot find
it, you can specify its location with this variable.  Mutt will
initially set this variable to the value of the environment
variable \fC$MAIL\fP or \fC$MAILDIR\fP if either is defined.


.TP
.B ssl_ca_certificates_file
.nf
Type: path
Default: \(lq\(rq
.fi
.IP
This variable specifies a file containing trusted CA certificates.
Any server certificate that is signed with one of these CA
certificates is also automatically accepted.
.IP
Example:

.IP
.DS
.sp
.ft CR
.nf
set ssl_ca_certificates_file=/etc/ssl/certs/ca\-certificates.crt

.fi
.ec
.ft P
.sp


.TP
.B ssl_client_cert
.nf
Type: path
Default: \(lq\(rq
.fi
.IP
The file containing a client certificate and its associated private
key.


.TP
.B ssl_force_tls
.nf
Type: boolean
Default: no
.fi
.IP
If this variable is \fIset\fP, Mutt will require that all connections
to remote servers be encrypted. Furthermore it will attempt to
negotiate TLS even if the server does not advertise the capability,
since it would otherwise have to abort the connection anyway. This
option supersedes $ssl_starttls.


.TP
.B ssl_min_dh_prime_bits
.nf
Type: number
Default: 0
.fi
.IP
This variable specifies the minimum acceptable prime size (in bits)
for use in any Diffie\-Hellman key exchange. A value of 0 will use
the default from the GNUTLS library.


.TP
.B ssl_starttls
.nf
Type: quadoption
Default: yes
.fi
.IP
If \fIset\fP (the default), mutt will attempt to use \fCSTARTTLS\fP on servers
advertising the capability. When \fIunset\fP, mutt will not attempt to
use \fCSTARTTLS\fP regardless of the server's capabilities.


.TP
.B ssl_use_sslv3
.nf
Type: boolean
Default: yes
.fi
.IP
This variable specifies whether to attempt to use SSLv3 in the
SSL authentication process.


.TP
.B ssl_use_tlsv1
.nf
Type: boolean
Default: yes
.fi
.IP
This variable specifies whether to attempt to use TLSv1 in the
SSL authentication process.


.TP
.B ssl_verify_dates
.nf
Type: boolean
Default: yes
.fi
.IP
If \fIset\fP (the default), mutt will not automatically accept a server
certificate that is either not yet valid or already expired. You should
only unset this for particular known hosts, using the
\fC<account-hook>\fP function.


.TP
.B ssl_verify_host
.nf
Type: boolean
Default: yes
.fi
.IP
If \fIset\fP (the default), mutt will not automatically accept a server
certificate whose host name does not match the host used in your folder
URL. You should only unset this for particular known hosts, using
the \fC<account-hook>\fP function.


.TP
.B status_chars
.nf
Type: string
Default: \(lq\-*%A\(rq
.fi
.IP
Controls the characters used by the \(lq%r\(rq indicator in
$status_format. The first character is used when the mailbox is
unchanged. The second is used when the mailbox has been changed, and
it needs to be resynchronized. The third is used if the mailbox is in
read\-only mode, or if the mailbox will not be written when exiting
that mailbox (You can toggle whether to write changes to a mailbox
with the \fC<toggle\-write>\fP operation, bound by default to \(lq%\(rq). The fourth
is used to indicate that the current folder has been opened in attach\-
message mode (Certain operations like composing a new mail, replying,
forwarding, etc. are not permitted in this mode).


.TP
.B status_format
.nf
Type: string
Default: \(lq\-%r\-Mutt: %f [Msgs:%?M?%M/?%m%?n? New:%n?%?o? Old:%o?%?d? Del:%d?%?F? Flag:%F?%?t? Tag:%t?%?p? Post:%p?%?b? Inc:%b?%?l? %l?]\-\-\-(%s/%S)\-%>\-(%P)\-\-\-\(rq
.fi
.IP
Controls the format of the status line displayed in the \(lqindex\(rq
menu.  This string is similar to $index_format, but has its own
set of \fCprintf(3)\fP\-like sequences:
.RS
.PD 0
.TP
%b  
number of mailboxes with new mail *
.TP
%d  
number of deleted messages *
.TP
%f  
the full pathname of the current mailbox
.TP
%F  
number of flagged messages *
.TP
%h  
local hostname
.TP
%l  
size (in bytes) of the current mailbox *
.TP
%L  
size (in bytes) of the messages shown
(i.e., which match the current limit) *
.TP
%m  
the number of messages in the mailbox *
.TP
%M  
the number of messages shown (i.e., which match the current limit) *
.TP
%n  
number of new messages in the mailbox *
.TP
%o  
number of old unread messages *
.TP
%p  
number of postponed messages *
.TP
%P  
percentage of the way through the index
.TP
%r  
modified/read\-only/won't\-write/attach\-message indicator,
according to $status_chars
.TP
%s  
current sorting mode ($sort)
.TP
%S  
current aux sorting method ($sort_aux)
.TP
%t  
number of tagged messages *
.TP
%u  
number of unread messages *
.TP
%v  
Mutt version string
.TP
%V  
currently active limit pattern, if any *
.TP
%>X 
right justify the rest of the string and pad with \(lqX\(rq
.TP
%|X 
pad to the end of the line with \(lqX\(rq
.TP
%*X 
soft\-fill with character \(lqX\(rq as pad
.RE
.PD 1
.IP
For an explanation of \(lqsoft\-fill\(rq, see the $index_format documentation.
.IP
* = can be optionally printed if nonzero
.IP
Some of the above sequences can be used to optionally print a string
if their value is nonzero.  For example, you may only want to see the
number of flagged messages if such messages exist, since zero is not
particularly meaningful.  To optionally print a string based upon one
of the above sequences, the following construct is used:
.IP
\fC%?<sequence_char>?<optional_string>?\fP
.IP
where \fIsequence_char\fP is a character from the table above, and
\fIoptional_string\fP is the string you would like printed if
\fIsequence_char\fP is nonzero.  \fIoptional_string\fP \fBmay\fP contain
other sequences as well as normal text, but you may \fBnot\fP nest
optional strings.
.IP
Here is an example illustrating how to optionally print the number of
new messages in a mailbox:
.IP
\fC%?n?%n new messages.?\fP
.IP
You can also switch between two strings using the following construct:
.IP
\fC%?<sequence_char>?<if_string>&<else_string>?\fP
.IP
If the value of \fIsequence_char\fP is non\-zero, \fIif_string\fP will
be expanded, otherwise \fIelse_string\fP will be expanded.
.IP
You can force the result of any \fCprintf(3)\fP\-like sequence to be lowercase
by prefixing the sequence character with an underscore (\(lq_\(rq) sign.
For example, if you want to display the local hostname in lowercase,
you would use: \(lq\fC%_h\fP\(rq.
.IP
If you prefix the sequence character with a colon (\(lq:\(rq) character, mutt
will replace any dots in the expansion by underscores. This might be helpful
with IMAP folders that don't like dots in folder names.


.TP
.B status_on_top
.nf
Type: boolean
Default: no
.fi
.IP
Setting this variable causes the \(lqstatus bar\(rq to be displayed on
the first line of the screen rather than near the bottom. If $help
is \fIset\fP, too it'll be placed at the bottom.


.TP
.B strict_threads
.nf
Type: boolean
Default: no
.fi
.IP
If \fIset\fP, threading will only make use of the \(lqIn\-Reply\-To\(rq and
\(lqReferences:\(rq fields when you $sort by message threads.  By
default, messages with the same subject are grouped together in
\(lqpseudo threads.\(rq. This may not always be desirable, such as in a
personal mailbox where you might have several unrelated messages with
the subjects like \(lqhi\(rq which will get grouped together. See also
$sort_re for a less drastic way of controlling this
behavior.


.TP
.B suspend
.nf
Type: boolean
Default: yes
.fi
.IP
When \fIunset\fP, mutt won't stop when the user presses the terminal's
\fIsusp\fP key, usually \(lq^Z\(rq. This is useful if you run mutt
inside an xterm using a command like \(lq\fCxterm \-e mutt\fP\(rq.


.TP
.B text_flowed
.nf
Type: boolean
Default: no
.fi
.IP
When \fIset\fP, mutt will generate \(lqformat=flowed\(rq bodies with a content type
of \(lq\fCtext/plain; format=flowed\fP\(rq.
This format is easier to handle for some mailing software, and generally
just looks like ordinary text.  To actually make use of this format's
features, you'll need support in your editor.
.IP
Note that $indent_string is ignored when this option is \fIset\fP.


.TP
.B thorough_search
.nf
Type: boolean
Default: yes
.fi
.IP
Affects the \fC~b\fP and \fC~h\fP search operations described in
section \(lqpatterns\(rq.  If \fIset\fP, the headers and body/attachments of
messages to be searched are decoded before searching. If \fIunset\fP,
messages are searched as they appear in the folder.
.IP
Users searching attachments or for non\-ASCII characters should \fIset\fP
this value because decoding also includes MIME parsing/decoding and possible
character set conversions. Otherwise mutt will attempt to match against the
raw message received (for example quoted\-printable encoded or with encoded
headers) which may lead to incorrect search results.


.TP
.B thread_received
.nf
Type: boolean
Default: no
.fi
.IP
When \fIset\fP, mutt uses the date received rather than the date sent
to thread messages by subject.


.TP
.B tilde
.nf
Type: boolean
Default: no
.fi
.IP
When \fIset\fP, the internal\-pager will pad blank lines to the bottom of the
screen with a tilde (\(lq~\(rq).


.TP
.B time_inc
.nf
Type: number
Default: 0
.fi
.IP
Along with $read_inc, $write_inc, and $net_inc, this
variable controls the frequency with which progress updates are
displayed. It suppresses updates less than $time_inc milliseconds
apart. This can improve throughput on systems with slow terminals,
or when running mutt on a remote system.
.IP
Also see the \(lqtuning\(rq section of the manual for performance considerations.


.TP
.B timeout
.nf
Type: number
Default: 600
.fi
.IP
When Mutt is waiting for user input either idling in menus or
in an interactive prompt, Mutt would block until input is
present. Depending on the context, this would prevent certain
operations from working, like checking for new mail or keeping
an IMAP connection alive.
.IP
This variable controls how many seconds Mutt will at most wait
until it aborts waiting for input, performs these operations and
continues to wait for input.
.IP
A value of zero or less will cause Mutt to never time out.


.TP
.B tmpdir
.nf
Type: path
Default: \(lq\(rq
.fi
.IP
This variable allows you to specify where Mutt will place its
temporary files needed for displaying and composing messages.  If
this variable is not set, the environment variable \fC$TMPDIR\fP is
used.  If \fC$TMPDIR\fP is not set then \(lq\fC/var/tmp\fP\(rq is used.


.TP
.B to_chars
.nf
Type: string
Default: \(lq +TCFL\(rq
.fi
.IP
Controls the character used to indicate mail addressed to you.  The
first character is the one used when the mail is \fInot\fP addressed to your
address.  The second is used when you are the only
recipient of the message.  The third is when your address
appears in the \(lqTo:\(rq header field, but you are not the only recipient of
the message.  The fourth character is used when your
address is specified in the \(lqCc:\(rq header field, but you are not the only
recipient.  The fifth character is used to indicate mail that was sent
by \fIyou\fP.  The sixth character is used to indicate when a mail
was sent to a mailing\-list you subscribe to.


.TP
.B tunnel
.nf
Type: string
Default: \(lq\(rq
.fi
.IP
Setting this variable will cause mutt to open a pipe to a command
instead of a raw socket. You may be able to use this to set up
preauthenticated connections to your IMAP/POP3/SMTP server. Example:

.IP
.DS
.sp
.ft CR
.nf
set tunnel=\(rqssh \-q mailhost.net /usr/local/libexec/imapd\(rq

.fi
.ec
.ft P
.sp
.IP
Note: For this example to work you must be able to log in to the remote
machine without having to enter a password.
.IP
When set, Mutt uses the tunnel for all remote connections.
Please see \(lqaccount-hook\(rq in the manual for how to use different
tunnel commands per connection.


.TP
.B uncollapse_jump
.nf
Type: boolean
Default: no
.fi
.IP
When \fIset\fP, Mutt will jump to the next unread message, if any,
when the current thread is \fIun\fPcollapsed.


.TP
.B use_8bitmime
.nf
Type: boolean
Default: no
.fi
.IP
\fBWarning:\fP do not set this variable unless you are using a version
of sendmail which supports the \fC\-B8BITMIME\fP flag (such as sendmail
8.8.x) or you may not be able to send mail.
.IP
When \fIset\fP, Mutt will invoke $sendmail with the \fC\-B8BITMIME\fP
flag when sending 8\-bit messages to enable ESMTP negotiation.


.TP
.B use_domain
.nf
Type: boolean
Default: yes
.fi
.IP
When \fIset\fP, Mutt will qualify all local addresses (ones without the
\(lq@host\(rq portion) with the value of $hostname.  If \fIunset\fP, no
addresses will be qualified.


.TP
.B use_envelope_from
.nf
Type: boolean
Default: no
.fi
.IP
When \fIset\fP, mutt will set the \fIenvelope\fP sender of the message.
If $envelope_from_address is \fIset\fP, it will be used as the sender
address. If \fIunset\fP, mutt will attempt to derive the sender from the
\(lqFrom:\(rq header.
.IP
Note that this information is passed to sendmail command using the
\fC\-f\fP command line switch. Therefore setting this option is not useful
if the $sendmail variable already contains \fC\-f\fP or if the
executable pointed to by $sendmail doesn't support the \fC\-f\fP switch.


.TP
.B use_from
.nf
Type: boolean
Default: yes
.fi
.IP
When \fIset\fP, Mutt will generate the \(lqFrom:\(rq header field when
sending messages.  If \fIunset\fP, no \(lqFrom:\(rq header field will be
generated unless the user explicitly sets one using the \(lqmy_hdr\(rq
command.


.TP
.B use_idn
.nf
Type: boolean
Default: yes
.fi
.IP
When \fIset\fP, Mutt will show you international domain names decoded.
Note: You can use IDNs for addresses even if this is \fIunset\fP.
This variable only affects decoding.


.TP
.B use_ipv6
.nf
Type: boolean
Default: yes
.fi
.IP
When \fIset\fP, Mutt will look for IPv6 addresses of hosts it tries to
contact.  If this option is \fIunset\fP, Mutt will restrict itself to IPv4 addresses.
Normally, the default should work.


.TP
.B user_agent
.nf
Type: boolean
Default: yes
.fi
.IP
When \fIset\fP, mutt will add a \(lqUser\-Agent:\(rq header to outgoing
messages, indicating which version of mutt was used for composing
them.


.TP
.B visual
.nf
Type: path
Default: \(lq\(rq
.fi
.IP
Specifies the visual editor to invoke when the \(lq\fC~v\fP\(rq command is
given in the built\-in editor.


.TP
.B wait_key
.nf
Type: boolean
Default: yes
.fi
.IP
Controls whether Mutt will ask you to press a key after an external command
has been invoked by these functions: \fC<shell\-escape>\fP,
\fC<pipe\-message>\fP, \fC<pipe\-entry>\fP, \fC<print\-message>\fP,
and \fC<print\-entry>\fP commands.
.IP
It is also used when viewing attachments with \(lqauto_view\(rq, provided
that the corresponding mailcap entry has a \fIneedsterminal\fP flag,
and the external program is interactive.
.IP
When \fIset\fP, Mutt will always ask for a key. When \fIunset\fP, Mutt will wait
for a key only if the external command returned a non\-zero status.


.TP
.B weed
.nf
Type: boolean
Default: yes
.fi
.IP
When \fIset\fP, mutt will weed headers when displaying, forwarding,
printing, or replying to messages.


.TP
.B wrap
.nf
Type: number
Default: 0
.fi
.IP
When set to a positive value, mutt will wrap text at $wrap characters.
When set to a negative value, mutt will wrap text so that there are $wrap
characters of empty space on the right side of the terminal. Setting it
to zero makes mutt wrap at the terminal width.


.TP
.B wrap_headers
.nf
Type: number
Default: 78
.fi
.IP
This option specifies the number of characters to use for wrapping
an outgoing message's headers. Allowed values are between 78 and 998
inclusive.
.IP
\fBNote:\fP This option usually shouldn't be changed. RFC5233
recommends a line length of 78 (the default), so \fBplease only change
this setting when you know what you're doing\fP.


.TP
.B wrap_search
.nf
Type: boolean
Default: yes
.fi
.IP
Controls whether searches wrap around the end.
.IP
When \fIset\fP, searches will wrap around the first (or last) item. When
\fIunset\fP, incremental searches will not wrap.


.TP
.B wrapmargin
.nf
Type: number
Default: 0
.fi
.IP
(DEPRECATED) Equivalent to setting $wrap with a negative value.


.TP
.B write_bcc
.nf
Type: boolean
Default: yes
.fi
.IP
Controls whether mutt writes out the \(lqBcc:\(rq header when preparing
messages to be sent.  Exim users may wish to unset this. If mutt
is set to deliver directly via SMTP (see $smtp_url), this
option does nothing: mutt will never write out the \(lqBcc:\(rq header
in this case.


.TP
.B write_inc
.nf
Type: number
Default: 10
.fi
.IP
When writing a mailbox, a message will be printed every
$write_inc messages to indicate progress.  If set to 0, only a
single message will be displayed before writing a mailbox.
.IP
Also see the $read_inc, $net_inc and $time_inc variables and the
\(lqtuning\(rq section of the manual for performance considerations.


.\" -*-nroff-*-
.SH SEE ALSO
.PP
.BR iconv (1),
.BR iconv (3),
.BR mailcap (5),
.BR maildir (5),
.BR mbox (5),
.BR mutt (1),
.BR printf (3),
.BR regex (7),
.BR strftime (3)
.PP
The Mutt Manual
.PP
The Mutt home page: http://www.mutt.org/
.SH AUTHOR
.PP
Michael Elkins, and others.  Use <mutt-dev@mutt.org> to contact
the developers.
